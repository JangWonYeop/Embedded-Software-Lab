
lab0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023c  00800100  00001868  000018fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001868  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000058c  0080033c  0080033c  00001b38  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000038a  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013c6  00000000  00000000  00001ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a4  00000000  00000000  000032a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012a5  00000000  00000000  0000374c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  000049f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000401  00000000  00000000  00004d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000be2  00000000  00000000  00005115  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 96 02 	jmp	0x52c	; 0x52c <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e6       	ldi	r30, 0x68	; 104
      a0:	f8 e1       	ldi	r31, 0x18	; 24
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 33       	cpi	r26, 0x3C	; 60
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	18 e0       	ldi	r17, 0x08	; 8
      b4:	ac e3       	ldi	r26, 0x3C	; 60
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 3c       	cpi	r26, 0xC8	; 200
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 e7 08 	call	0x11ce	; 0x11ce <main>
      c6:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <rx_char0>:
/*
* Function tx_char without interrupt mode 
*/
UINT8 rx_char0(void)
{
	while(!(UCSR0A & _BV(RXC0)));
      ce:	5f 9b       	sbis	0x0b, 7	; 11
      d0:	fe cf       	rjmp	.-4      	; 0xce <rx_char0>
	return UDR0;
      d2:	8c b1       	in	r24, 0x0c	; 12
}
      d4:	08 95       	ret

000000d6 <tx_char0>:
/*
* Function tx_char without interrupt mode 
*/
void tx_char0(UINT8 c)
{
	while(!(UCSR0A & (1 << UDRE0)));  //±èº´¼± ¼öÁ¤ : UDRE1 -> UDRE0
      d6:	5d 9b       	sbis	0x0b, 5	; 11
      d8:	fe cf       	rjmp	.-4      	; 0xd6 <tx_char0>
	UDR0 = c;
      da:	8c b9       	out	0x0c, r24	; 12
}
      dc:	08 95       	ret

000000de <rx_char1_if_any>:

UINT8 rx_char1_if_any(void)
{
    UINT8 tmp;
    if((UCSR1A & (1 << RXC))) {
      de:	80 91 9b 00 	lds	r24, 0x009B
      e2:	87 fd       	sbrc	r24, 7
      e4:	02 c0       	rjmp	.+4      	; 0xea <rx_char1_if_any+0xc>
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	08 95       	ret
		tmp = UDR1;
      ea:	80 91 9c 00 	lds	r24, 0x009C
      ee:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
    }
    return 0;
}
      f0:	08 95       	ret

000000f2 <rx_char1>:

UINT8 rx_char1(void)
{
	while(!(UCSR1A & (1 << RXC)));
      f2:	80 91 9b 00 	lds	r24, 0x009B
      f6:	87 ff       	sbrs	r24, 7
      f8:	fc cf       	rjmp	.-8      	; 0xf2 <rx_char1>
	return UDR1 & 0xff;
      fa:	80 91 9c 00 	lds	r24, 0x009C
}
      fe:	08 95       	ret

00000100 <tx_char1>:

/*
* Function tx_char without interrupt mode 
*/
void tx_char1(UINT8 c)
{
     100:	98 2f       	mov	r25, r24
	while(!(UCSR1A & (1 << UDRE1))); 
     102:	80 91 9b 00 	lds	r24, 0x009B
     106:	85 ff       	sbrs	r24, 5
     108:	fc cf       	rjmp	.-8      	; 0x102 <tx_char1+0x2>
	UDR1 = c;
     10a:	90 93 9c 00 	sts	0x009C, r25
}
     10e:	08 95       	ret

00000110 <uart_init>:

int uart_init(int ch,int stop,int parity, int baud, int rx_intr,int tx_intr)
{
     110:	ef 92       	push	r14
     112:	ff 92       	push	r15
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
	if( ch == UART_CH0 )
     118:	00 97       	sbiw	r24, 0x00	; 0
     11a:	a1 f5       	brne	.+104    	; 0x184 <uart_init+0x74>
	{
		UCSR0A = (mcu_baud_tbl[baud].UX2 << U2X);
     11c:	f9 01       	movw	r30, r18
     11e:	ee 0f       	add	r30, r30
     120:	ff 1f       	adc	r31, r31
     122:	e2 0f       	add	r30, r18
     124:	f3 1f       	adc	r31, r19
     126:	e7 5b       	subi	r30, 0xB7	; 183
     128:	fd 4f       	sbci	r31, 0xFD	; 253
     12a:	82 81       	ldd	r24, Z+2	; 0x02
     12c:	88 0f       	add	r24, r24
     12e:	8b b9       	out	0x0b, r24	; 11
		UCSR0B = 0;
     130:	1a b8       	out	0x0a, r1	; 10
				
		if(parity == PARITY_NONE)
     132:	41 15       	cp	r20, r1
     134:	51 05       	cpc	r21, r1
     136:	19 f4       	brne	.+6      	; 0x13e <uart_init+0x2e>
			UCSR0C = 0 << UPM10;
     138:	10 92 95 00 	sts	0x0095, r1
     13c:	08 c0       	rjmp	.+16     	; 0x14e <uart_init+0x3e>
		else if(parity == PARITY_ODD)
     13e:	41 30       	cpi	r20, 0x01	; 1
     140:	51 05       	cpc	r21, r1
     142:	11 f4       	brne	.+4      	; 0x148 <uart_init+0x38>
			UCSR0C = 3 << UPM10;
     144:	80 e3       	ldi	r24, 0x30	; 48
     146:	01 c0       	rjmp	.+2      	; 0x14a <uart_init+0x3a>
		else // Even parity
			UCSR0C = 2 << UPM10;
     148:	80 e2       	ldi	r24, 0x20	; 32
     14a:	80 93 95 00 	sts	0x0095, r24
		
		UCSR0C |= 3 << 1; // 8 bits default
     14e:	80 91 95 00 	lds	r24, 0x0095
     152:	86 60       	ori	r24, 0x06	; 6
     154:	80 93 95 00 	sts	0x0095, r24
		UBRR0H = mcu_baud_tbl[baud].ubrr >> 8;
     158:	f9 01       	movw	r30, r18
     15a:	ee 0f       	add	r30, r30
     15c:	ff 1f       	adc	r31, r31
     15e:	e2 0f       	add	r30, r18
     160:	f3 1f       	adc	r31, r19
     162:	e7 5b       	subi	r30, 0xB7	; 183
     164:	fd 4f       	sbci	r31, 0xFD	; 253
     166:	90 81       	ld	r25, Z
     168:	81 81       	ldd	r24, Z+1	; 0x01
     16a:	80 93 90 00 	sts	0x0090, r24
		UBRR0L = mcu_baud_tbl[baud].ubrr & 0xff;
     16e:	99 b9       	out	0x09, r25	; 9

		if(rx_intr) 
     170:	01 2b       	or	r16, r17
     172:	09 f0       	breq	.+2      	; 0x176 <uart_init+0x66>
			UCSR0B |= (1 << RXCIE0);
     174:	57 9a       	sbi	0x0a, 7	; 10
		if(tx_intr) 
     176:	ef 28       	or	r14, r15
     178:	09 f0       	breq	.+2      	; 0x17c <uart_init+0x6c>
			UCSR0B |= (1 << UDRIE);
     17a:	55 9a       	sbi	0x0a, 5	; 10
	
		UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     17c:	8a b1       	in	r24, 0x0a	; 10
     17e:	88 61       	ori	r24, 0x18	; 24
     180:	8a b9       	out	0x0a, r24	; 10
     182:	45 c0       	rjmp	.+138    	; 0x20e <uart_init+0xfe>
		return 0;
	}
	else if( ch == UART_CH1 )
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	19 f0       	breq	.+6      	; 0x18e <uart_init+0x7e>
     188:	2f ef       	ldi	r18, 0xFF	; 255
     18a:	3f ef       	ldi	r19, 0xFF	; 255
     18c:	42 c0       	rjmp	.+132    	; 0x212 <uart_init+0x102>
	{
		UCSR1A = (mcu_baud_tbl[baud].UX2 << U2X);
     18e:	f9 01       	movw	r30, r18
     190:	ee 0f       	add	r30, r30
     192:	ff 1f       	adc	r31, r31
     194:	e2 0f       	add	r30, r18
     196:	f3 1f       	adc	r31, r19
     198:	e7 5b       	subi	r30, 0xB7	; 183
     19a:	fd 4f       	sbci	r31, 0xFD	; 253
     19c:	82 81       	ldd	r24, Z+2	; 0x02
     19e:	88 0f       	add	r24, r24
     1a0:	80 93 9b 00 	sts	0x009B, r24
		UCSR1B = 0;
     1a4:	10 92 9a 00 	sts	0x009A, r1
		if(parity == PARITY_NONE)
     1a8:	41 15       	cp	r20, r1
     1aa:	51 05       	cpc	r21, r1
     1ac:	19 f4       	brne	.+6      	; 0x1b4 <uart_init+0xa4>
			UCSR1C = 0 << UPM10;
     1ae:	10 92 9d 00 	sts	0x009D, r1
     1b2:	08 c0       	rjmp	.+16     	; 0x1c4 <uart_init+0xb4>
		else if(parity == PARITY_ODD)
     1b4:	41 30       	cpi	r20, 0x01	; 1
     1b6:	51 05       	cpc	r21, r1
     1b8:	11 f4       	brne	.+4      	; 0x1be <uart_init+0xae>
			UCSR1C = 3 << UPM10;
     1ba:	80 e3       	ldi	r24, 0x30	; 48
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <uart_init+0xb0>
		else // Even parity
			UCSR1C = 2 << UPM10;
     1be:	80 e2       	ldi	r24, 0x20	; 32
     1c0:	80 93 9d 00 	sts	0x009D, r24
		
		UCSR1C |= 3 << 1; // 8 bits default
     1c4:	80 91 9d 00 	lds	r24, 0x009D
     1c8:	86 60       	ori	r24, 0x06	; 6
     1ca:	80 93 9d 00 	sts	0x009D, r24
		UBRR1H = mcu_baud_tbl[baud].ubrr >> 8;
     1ce:	f9 01       	movw	r30, r18
     1d0:	ee 0f       	add	r30, r30
     1d2:	ff 1f       	adc	r31, r31
     1d4:	e2 0f       	add	r30, r18
     1d6:	f3 1f       	adc	r31, r19
     1d8:	e7 5b       	subi	r30, 0xB7	; 183
     1da:	fd 4f       	sbci	r31, 0xFD	; 253
     1dc:	90 81       	ld	r25, Z
     1de:	81 81       	ldd	r24, Z+1	; 0x01
     1e0:	80 93 98 00 	sts	0x0098, r24
		UBRR1L = mcu_baud_tbl[baud].ubrr & 0xff;
     1e4:	90 93 99 00 	sts	0x0099, r25
		if(rx_intr) 
     1e8:	01 2b       	or	r16, r17
     1ea:	29 f0       	breq	.+10     	; 0x1f6 <uart_init+0xe6>
			UCSR1B |= (1 << RXCIE1);
     1ec:	80 91 9a 00 	lds	r24, 0x009A
     1f0:	80 68       	ori	r24, 0x80	; 128
     1f2:	80 93 9a 00 	sts	0x009A, r24
		if(tx_intr) 
     1f6:	ef 28       	or	r14, r15
     1f8:	29 f0       	breq	.+10     	; 0x204 <uart_init+0xf4>
			UCSR1B |= (1 << UDRIE);
     1fa:	80 91 9a 00 	lds	r24, 0x009A
     1fe:	80 62       	ori	r24, 0x20	; 32
     200:	80 93 9a 00 	sts	0x009A, r24
		UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     204:	80 91 9a 00 	lds	r24, 0x009A
     208:	88 61       	ori	r24, 0x18	; 24
     20a:	80 93 9a 00 	sts	0x009A, r24
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e0       	ldi	r19, 0x00	; 0
		return 0;
	}
	return -1;
}
     212:	c9 01       	movw	r24, r18
     214:	1f 91       	pop	r17
     216:	0f 91       	pop	r16
     218:	ff 90       	pop	r15
     21a:	ef 90       	pop	r14
     21c:	08 95       	ret

0000021e <my_putchar>:
/*
* Function tx_char without interrupt mode 
*/
void tx_char0(UINT8 c)
{
	while(!(UCSR0A & (1 << UDRE0)));  //±èº´¼± ¼öÁ¤ : UDRE1 -> UDRE0
     21e:	5d 9b       	sbis	0x0b, 5	; 11
     220:	fe cf       	rjmp	.-4      	; 0x21e <my_putchar>
	UDR0 = c;
     222:	8c b9       	out	0x0c, r24	; 12


void my_putchar(UINT8 c)
{
	tx_char0(c);
	if(c == '\n') tx_char0('\r');
     224:	8a 30       	cpi	r24, 0x0A	; 10
     226:	21 f4       	brne	.+8      	; 0x230 <my_putchar+0x12>
/*
* Function tx_char without interrupt mode 
*/
void tx_char0(UINT8 c)
{
	while(!(UCSR0A & (1 << UDRE0)));  //±èº´¼± ¼öÁ¤ : UDRE1 -> UDRE0
     228:	5d 9b       	sbis	0x0b, 5	; 11
     22a:	fe cf       	rjmp	.-4      	; 0x228 <my_putchar+0xa>
	UDR0 = c;
     22c:	8d e0       	ldi	r24, 0x0D	; 13
     22e:	8c b9       	out	0x0c, r24	; 12
     230:	08 95       	ret

00000232 <my_getchar>:
/*
* Function tx_char without interrupt mode 
*/
UINT8 rx_char0(void)
{
	while(!(UCSR0A & _BV(RXC0)));
     232:	5f 9b       	sbis	0x0b, 7	; 11
     234:	fe cf       	rjmp	.-4      	; 0x232 <my_getchar>
	return UDR0;
     236:	8c b1       	in	r24, 0x0c	; 12
UINT8 my_getchar(void)
{
	UINT8 data;
	data = rx_char0();
	return data;
}
     238:	08 95       	ret

0000023a <sys_putchar>:
/*
* Function tx_char without interrupt mode 
*/
void tx_char0(UINT8 c)
{
	while(!(UCSR0A & (1 << UDRE0)));  //±èº´¼± ¼öÁ¤ : UDRE1 -> UDRE0
     23a:	5d 9b       	sbis	0x0b, 5	; 11
     23c:	fe cf       	rjmp	.-4      	; 0x23a <sys_putchar>
	UDR0 = c;
     23e:	8c b9       	out	0x0c, r24	; 12

#include <stdio.h>
int sys_putchar(char c, FILE *file)
{
    tx_char0(c);
    if(c == '\n') tx_char0('\r');
     240:	8a 30       	cpi	r24, 0x0A	; 10
     242:	21 f4       	brne	.+8      	; 0x24c <sys_putchar+0x12>
/*
* Function tx_char without interrupt mode 
*/
void tx_char0(UINT8 c)
{
	while(!(UCSR0A & (1 << UDRE0)));  //±èº´¼± ¼öÁ¤ : UDRE1 -> UDRE0
     244:	5d 9b       	sbis	0x0b, 5	; 11
     246:	fe cf       	rjmp	.-4      	; 0x244 <sys_putchar+0xa>
	UDR0 = c;
     248:	8d e0       	ldi	r24, 0x0D	; 13
     24a:	8c b9       	out	0x0c, r24	; 12
#include <stdio.h>
int sys_putchar(char c, FILE *file)
{
    tx_char0(c);
    if(c == '\n') tx_char0('\r');
}
     24c:	08 95       	ret

0000024e <get_cmd>:
/*
* Function tx_char without interrupt mode 
*/
UINT8 rx_char0(void)
{
	while(!(UCSR0A & _BV(RXC0)));
     24e:	5f 9b       	sbis	0x0b, 7	; 11
     250:	fe cf       	rjmp	.-4      	; 0x24e <get_cmd>
	return UDR0;
     252:	8c b1       	in	r24, 0x0c	; 12
#define JC_putchar  my_putchar
static int JC_getchar()
{
	signed char c;
    c = my_getchar();
	return c;		
     254:	99 27       	eor	r25, r25
     256:	87 fd       	sbrc	r24, 7
     258:	90 95       	com	r25
	int c;
	while(1)
	{
		c = JC_getchar();

		if(c == (int)-1) 
     25a:	2f ef       	ldi	r18, 0xFF	; 255
     25c:	8f 3f       	cpi	r24, 0xFF	; 255
     25e:	92 07       	cpc	r25, r18
     260:	b1 f3       	breq	.-20     	; 0x24e <get_cmd>
			continue;
		
		if(Cmd_buf.idx >=  sizeof(Cmd_buf.cmd_buf) - 1) {
     262:	20 91 a7 04 	lds	r18, 0x04A7
     266:	2f 37       	cpi	r18, 0x7F	; 127
     268:	30 f0       	brcs	.+12     	; 0x276 <get_cmd+0x28>
			Cmd_buf.cmd_buf[Cmd_buf.idx] = '\0';
     26a:	e2 2f       	mov	r30, r18
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	e9 5d       	subi	r30, 0xD9	; 217
     270:	fb 4f       	sbci	r31, 0xFB	; 251
     272:	10 82       	st	Z, r1
     274:	08 95       	ret
			return;
		}
		else if(c == '\b'){
     276:	88 30       	cpi	r24, 0x08	; 8
     278:	91 05       	cpc	r25, r1
     27a:	89 f4       	brne	.+34     	; 0x29e <get_cmd+0x50>
			if((Cmd_buf.idx > 0)){
     27c:	22 23       	and	r18, r18
     27e:	39 f3       	breq	.-50     	; 0x24e <get_cmd>
	return c;		
}

static int JC_putChar(char c)
{
	JC_putchar(c);
     280:	88 e0       	ldi	r24, 0x08	; 8
     282:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
			return;
		}
		else if(c == '\b'){
			if((Cmd_buf.idx > 0)){
				JC_putChar('\b'); JC_putChar(' '); JC_putChar('\b');
				Cmd_buf.idx --;
     286:	80 e2       	ldi	r24, 0x20	; 32
     288:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
     28c:	88 e0       	ldi	r24, 0x08	; 8
     28e:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
     292:	80 91 a7 04 	lds	r24, 0x04A7
     296:	81 50       	subi	r24, 0x01	; 1
     298:	80 93 a7 04 	sts	0x04A7, r24
     29c:	d8 cf       	rjmp	.-80     	; 0x24e <get_cmd>
			}
		}
		else if(c == '\n' || c == '\r')
     29e:	8a 30       	cpi	r24, 0x0A	; 10
     2a0:	91 05       	cpc	r25, r1
     2a2:	19 f0       	breq	.+6      	; 0x2aa <get_cmd+0x5c>
     2a4:	8d 30       	cpi	r24, 0x0D	; 13
     2a6:	91 05       	cpc	r25, r1
     2a8:	79 f4       	brne	.+30     	; 0x2c8 <get_cmd+0x7a>
	return c;		
}

static int JC_putChar(char c)
{
	JC_putchar(c);
     2aa:	8a e0       	ldi	r24, 0x0A	; 10
     2ac:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
			}
		}
		else if(c == '\n' || c == '\r')
		{
			JC_putChar('\n'); JC_putChar('\r');
			Cmd_buf.cmd_buf[Cmd_buf.idx] = '\0';
     2b0:	8d e0       	ldi	r24, 0x0D	; 13
     2b2:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
     2b6:	e0 91 a7 04 	lds	r30, 0x04A7
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	e9 5d       	subi	r30, 0xD9	; 217
     2be:	fb 4f       	sbci	r31, 0xFB	; 251
     2c0:	10 82       	st	Z, r1
			Cmd_buf.idx = 0;
     2c2:	10 92 a7 04 	sts	0x04A7, r1
     2c6:	08 95       	ret
			return;
		}
		else
		{
			Cmd_buf.cmd_buf[Cmd_buf.idx++] = c;
     2c8:	e2 2f       	mov	r30, r18
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	e9 5d       	subi	r30, 0xD9	; 217
     2ce:	fb 4f       	sbci	r31, 0xFB	; 251
     2d0:	80 83       	st	Z, r24
     2d2:	2f 5f       	subi	r18, 0xFF	; 255
     2d4:	20 93 a7 04 	sts	0x04A7, r18
	return c;		
}

static int JC_putChar(char c)
{
	JC_putchar(c);
     2d8:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
     2dc:	b8 cf       	rjmp	.-144    	; 0x24e <get_cmd>

000002de <delay_1ms>:
	}
	return 0;
}

unsigned char delay_1ms(unsigned char anchor)
{
     2de:	20 e8       	ldi	r18, 0x80	; 128
     2e0:	3e e3       	ldi	r19, 0x3E	; 62
	unsigned char cur,next;
	cur = anchor;
	delay = SYS_CLK / 1000;
	while(delay > 0)
	{
		next = TCNT0;
     2e2:	92 b7       	in	r25, 0x32	; 50
		delay -= (next - cur) & 0xff;
     2e4:	49 2f       	mov	r20, r25
     2e6:	48 1b       	sub	r20, r24
     2e8:	24 1b       	sub	r18, r20
     2ea:	31 09       	sbc	r19, r1
     2ec:	89 2f       	mov	r24, r25
{
    signed int delay;
	unsigned char cur,next;
	cur = anchor;
	delay = SYS_CLK / 1000;
	while(delay > 0)
     2ee:	12 16       	cp	r1, r18
     2f0:	13 06       	cpc	r1, r19
     2f2:	bc f3       	brlt	.-18     	; 0x2e2 <delay_1ms+0x4>
		next = TCNT0;
		delay -= (next - cur) & 0xff;
		cur = next;
	}
	return cur;
}
     2f4:	08 95       	ret

000002f6 <delay_ms>:

delay_ms(unsigned int v)
{
     2f6:	ac 01       	movw	r20, r24
    unsigned char start;
	start = TCNT0;
     2f8:	92 b7       	in	r25, 0x32	; 50
     2fa:	0f c0       	rjmp	.+30     	; 0x31a <delay_ms+0x24>
	while(v--) start = delay_1ms(start);
     2fc:	89 2f       	mov	r24, r25
     2fe:	20 e8       	ldi	r18, 0x80	; 128
     300:	3e e3       	ldi	r19, 0x3E	; 62
	unsigned char cur,next;
	cur = anchor;
	delay = SYS_CLK / 1000;
	while(delay > 0)
	{
		next = TCNT0;
     302:	92 b7       	in	r25, 0x32	; 50
		delay -= (next - cur) & 0xff;
     304:	69 2f       	mov	r22, r25
     306:	68 1b       	sub	r22, r24
     308:	26 1b       	sub	r18, r22
     30a:	31 09       	sbc	r19, r1
{
    signed int delay;
	unsigned char cur,next;
	cur = anchor;
	delay = SYS_CLK / 1000;
	while(delay > 0)
     30c:	12 16       	cp	r1, r18
     30e:	13 06       	cpc	r1, r19
     310:	14 f4       	brge	.+4      	; 0x316 <delay_ms+0x20>
     312:	89 2f       	mov	r24, r25
     314:	f6 cf       	rjmp	.-20     	; 0x302 <delay_ms+0xc>
     316:	41 50       	subi	r20, 0x01	; 1
     318:	50 40       	sbci	r21, 0x00	; 0

delay_ms(unsigned int v)
{
    unsigned char start;
	start = TCNT0;
	while(v--) start = delay_1ms(start);
     31a:	41 15       	cp	r20, r1
     31c:	51 05       	cpc	r21, r1
     31e:	71 f7       	brne	.-36     	; 0x2fc <delay_ms+0x6>
}
     320:	08 95       	ret

00000322 <led_test>:
		printf("LCD wr addr = %x data = %x\n",addr,data);
	}
}

void led_test(int ac, char *av[])
{
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
    UINT8 save,i;
    TCNT0 = 0;
     32c:	12 be       	out	0x32, r1	; 50
    TCCR0 = 1; /* not scale the clock */
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	83 bf       	out	0x33, r24	; 51
	save = DDRA;
     332:	fa b2       	in	r15, 0x1a	; 26
	DDRA = 0xff;
     334:	8f ef       	ldi	r24, 0xFF	; 255
     336:	8a bb       	out	0x1a, r24	; 26
     338:	c0 e0       	ldi	r28, 0x00	; 0
     33a:	d0 e0       	ldi	r29, 0x00	; 0
    for( i = 0 ; i < 8 ; i ++)
	{
		PORTA = (1 << i);
     33c:	01 e0       	ldi	r16, 0x01	; 1
     33e:	10 e0       	ldi	r17, 0x00	; 0
     340:	c8 01       	movw	r24, r16
     342:	0c 2e       	mov	r0, r28
     344:	02 c0       	rjmp	.+4      	; 0x34a <led_test+0x28>
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	0a 94       	dec	r0
     34c:	e2 f7       	brpl	.-8      	; 0x346 <led_test+0x24>
     34e:	8b bb       	out	0x1b, r24	; 27
		delay_ms(500);
     350:	84 ef       	ldi	r24, 0xF4	; 244
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>
     358:	21 96       	adiw	r28, 0x01	; 1
    UINT8 save,i;
    TCNT0 = 0;
    TCCR0 = 1; /* not scale the clock */
	save = DDRA;
	DDRA = 0xff;
    for( i = 0 ; i < 8 ; i ++)
     35a:	c8 30       	cpi	r28, 0x08	; 8
     35c:	d1 05       	cpc	r29, r1
     35e:	81 f7       	brne	.-32     	; 0x340 <led_test+0x1e>
	{
		PORTA = (1 << i);
		delay_ms(500);
	}
	DDRA = save;
     360:	fa ba       	out	0x1a, r15	; 26
	TCCR0 = 0;
     362:	13 be       	out	0x33, r1	; 51
}
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	08 95       	ret

00000370 <my_delay>:
	/* 8 */ LED_A | LED_B | LED_C | LED_D | LED_E | LED_F | LED_G,
	/* 9 */ LED_A | LED_B | LED_C | LED_D | LED_F | LED_G
};

my_delay(int delay)
{
     370:	df 93       	push	r29
     372:	cf 93       	push	r28
     374:	00 d0       	rcall	.+0      	; 0x376 <my_delay+0x6>
     376:	00 d0       	rcall	.+0      	; 0x378 <my_delay+0x8>
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	9c 01       	movw	r18, r24
    volatile unsigned int i,j;
    for(j = 0 ; j < delay ; j ++)
     37e:	1c 82       	std	Y+4, r1	; 0x04
     380:	1b 82       	std	Y+3, r1	; 0x03
     382:	12 c0       	rjmp	.+36     	; 0x3a8 <my_delay+0x38>
		for( i = 0 ; i < 0xffff ; i ++);
     384:	1a 82       	std	Y+2, r1	; 0x02
     386:	19 82       	std	Y+1, r1	; 0x01
     388:	05 c0       	rjmp	.+10     	; 0x394 <my_delay+0x24>
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	9a 81       	ldd	r25, Y+2	; 0x02
     38e:	01 96       	adiw	r24, 0x01	; 1
     390:	9a 83       	std	Y+2, r25	; 0x02
     392:	89 83       	std	Y+1, r24	; 0x01
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	9a 81       	ldd	r25, Y+2	; 0x02
     398:	8f 5f       	subi	r24, 0xFF	; 255
     39a:	9f 4f       	sbci	r25, 0xFF	; 255
     39c:	b1 f7       	brne	.-20     	; 0x38a <my_delay+0x1a>
};

my_delay(int delay)
{
    volatile unsigned int i,j;
    for(j = 0 ; j < delay ; j ++)
     39e:	8b 81       	ldd	r24, Y+3	; 0x03
     3a0:	9c 81       	ldd	r25, Y+4	; 0x04
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	9c 83       	std	Y+4, r25	; 0x04
     3a6:	8b 83       	std	Y+3, r24	; 0x03
     3a8:	8b 81       	ldd	r24, Y+3	; 0x03
     3aa:	9c 81       	ldd	r25, Y+4	; 0x04
     3ac:	82 17       	cp	r24, r18
     3ae:	93 07       	cpc	r25, r19
     3b0:	48 f3       	brcs	.-46     	; 0x384 <my_delay+0x14>
		for( i = 0 ; i < 0xffff ; i ++);
		
}
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	cf 91       	pop	r28
     3bc:	df 91       	pop	r29
     3be:	08 95       	ret

000003c0 <init_i2c>:
#define MR_DATA_ACK 0x50
#define MR_DATA_NACK 0x58

init_i2c()
{
    PORTD = 3; /* For Pull-up override value */
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	82 bb       	out	0x12, r24	; 18
    SFIOR &= ~(1 << PUD); /* PUD */
     3c4:	80 b5       	in	r24, 0x20	; 32
     3c6:	8b 7f       	andi	r24, 0xFB	; 251
     3c8:	80 bd       	out	0x20, r24	; 32
    TWSR = TWI_PRESCALE_1;
     3ca:	10 92 71 00 	sts	0x0071, r1
    TWBR = 32; /* for 100 K Hz bus clock */
     3ce:	80 e2       	ldi	r24, 0x20	; 32
     3d0:	80 93 70 00 	sts	0x0070, r24
	TWCR = (1 << 6) | /* TWI Enable ACK bit */
     3d4:	84 e4       	ldi	r24, 0x44	; 68
     3d6:	80 93 74 00 	sts	0x0074, r24
	       (1 << 2) ; /* Enable TWI bus */
}
     3da:	08 95       	ret

000003dc <read_temp>:

int read_temp()
{
     3dc:	df 93       	push	r29
     3de:	cf 93       	push	r28
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <read_temp+0x6>
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
    int data;
	volatile unsigned int loop_cnt;
	
	loop_cnt = 0;
     3e6:	1a 82       	std	Y+2, r1	; 0x02
     3e8:	19 82       	std	Y+1, r1	; 0x01
    TWCR = TWI_START | TWI_TWINT | TWI_ENABLE;
     3ea:	84 ea       	ldi	r24, 0xA4	; 164
     3ec:	80 93 74 00 	sts	0x0074, r24
     3f0:	0d c0       	rjmp	.+26     	; 0x40c <read_temp+0x30>
	while(!(TWCR & TWI_TWINT))
	{
		loop_cnt ++;
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	9a 81       	ldd	r25, Y+2	; 0x02
     3f6:	01 96       	adiw	r24, 0x01	; 1
     3f8:	9a 83       	std	Y+2, r25	; 0x02
     3fa:	89 83       	std	Y+1, r24	; 0x01
		if(loop_cnt >= 0x1000) return 0x4000;
     3fc:	89 81       	ldd	r24, Y+1	; 0x01
     3fe:	9a 81       	ldd	r25, Y+2	; 0x02
     400:	80 50       	subi	r24, 0x00	; 0
     402:	90 41       	sbci	r25, 0x10	; 16
     404:	18 f0       	brcs	.+6      	; 0x40c <read_temp+0x30>
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e4       	ldi	r19, 0x40	; 64
     40a:	73 c0       	rjmp	.+230    	; 0x4f2 <read_temp+0x116>
    int data;
	volatile unsigned int loop_cnt;
	
	loop_cnt = 0;
    TWCR = TWI_START | TWI_TWINT | TWI_ENABLE;
	while(!(TWCR & TWI_TWINT))
     40c:	80 91 74 00 	lds	r24, 0x0074
     410:	87 ff       	sbrs	r24, 7
     412:	ef cf       	rjmp	.-34     	; 0x3f2 <read_temp+0x16>
	{
		loop_cnt ++;
		if(loop_cnt >= 0x1000) return 0x4000;
	}; /* wait Start condition sent */
	if((TWSR & TWI_STATUS_MASK) != START) 
     414:	80 91 71 00 	lds	r24, 0x0071
     418:	88 7f       	andi	r24, 0xF8	; 248
     41a:	88 30       	cpi	r24, 0x08	; 8
     41c:	09 f0       	breq	.+2      	; 0x420 <read_temp+0x44>
     41e:	59 c0       	rjmp	.+178    	; 0x4d2 <read_temp+0xf6>
	{
		/* Error */
		return 0x8000;
	}
	TWDR = TEMP_I2C_ADDR + 1;
     420:	89 e9       	ldi	r24, 0x99	; 153
     422:	80 93 73 00 	sts	0x0073, r24
	TWCR = TWI_TWINT | TWI_ENABLE;
     426:	84 e8       	ldi	r24, 0x84	; 132
     428:	80 93 74 00 	sts	0x0074, r24
	loop_cnt = 0;
     42c:	1a 82       	std	Y+2, r1	; 0x02
     42e:	19 82       	std	Y+1, r1	; 0x01
     430:	0d c0       	rjmp	.+26     	; 0x44c <read_temp+0x70>
	while(!(TWCR & TWI_TWINT)){
		loop_cnt ++;
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	9a 81       	ldd	r25, Y+2	; 0x02
     436:	01 96       	adiw	r24, 0x01	; 1
     438:	9a 83       	std	Y+2, r25	; 0x02
     43a:	89 83       	std	Y+1, r24	; 0x01
		if(loop_cnt >= 0x1000) return 0x4001;
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	9a 81       	ldd	r25, Y+2	; 0x02
     440:	80 50       	subi	r24, 0x00	; 0
     442:	90 41       	sbci	r25, 0x10	; 16
     444:	18 f0       	brcs	.+6      	; 0x44c <read_temp+0x70>
     446:	21 e0       	ldi	r18, 0x01	; 1
     448:	30 e4       	ldi	r19, 0x40	; 64
     44a:	53 c0       	rjmp	.+166    	; 0x4f2 <read_temp+0x116>
		return 0x8000;
	}
	TWDR = TEMP_I2C_ADDR + 1;
	TWCR = TWI_TWINT | TWI_ENABLE;
	loop_cnt = 0;
	while(!(TWCR & TWI_TWINT)){
     44c:	80 91 74 00 	lds	r24, 0x0074
     450:	87 ff       	sbrs	r24, 7
     452:	ef cf       	rjmp	.-34     	; 0x432 <read_temp+0x56>
		loop_cnt ++;
		if(loop_cnt >= 0x1000) return 0x4001;
		
    }	    ; /* wait Start condition sent */
	if((TWSR & TWI_STATUS_MASK) != MR_SLA_ACK) 
     454:	80 91 71 00 	lds	r24, 0x0071
     458:	88 7f       	andi	r24, 0xF8	; 248
     45a:	80 34       	cpi	r24, 0x40	; 64
     45c:	d1 f5       	brne	.+116    	; 0x4d2 <read_temp+0xf6>
	{
		/* No ack flag */
		return 0x8000; 
	}
	//	TWDR = cmd; /* Temp address to Command Reg*/
    TWCR = TWI_TWINT | TWI_ENABLE | TWI_ACKEN;
     45e:	84 ec       	ldi	r24, 0xC4	; 196
     460:	80 93 74 00 	sts	0x0074, r24
	loop_cnt = 0;
     464:	1a 82       	std	Y+2, r1	; 0x02
     466:	19 82       	std	Y+1, r1	; 0x01
     468:	0d c0       	rjmp	.+26     	; 0x484 <read_temp+0xa8>
	while(!(TWCR & TWI_TWINT))
	{
		loop_cnt ++;
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	9a 81       	ldd	r25, Y+2	; 0x02
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	89 83       	std	Y+1, r24	; 0x01
		if(loop_cnt >= 0x1000) return 0x4002;
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	9a 81       	ldd	r25, Y+2	; 0x02
     478:	80 50       	subi	r24, 0x00	; 0
     47a:	90 41       	sbci	r25, 0x10	; 16
     47c:	18 f0       	brcs	.+6      	; 0x484 <read_temp+0xa8>
     47e:	22 e0       	ldi	r18, 0x02	; 2
     480:	30 e4       	ldi	r19, 0x40	; 64
     482:	37 c0       	rjmp	.+110    	; 0x4f2 <read_temp+0x116>
		return 0x8000; 
	}
	//	TWDR = cmd; /* Temp address to Command Reg*/
    TWCR = TWI_TWINT | TWI_ENABLE | TWI_ACKEN;
	loop_cnt = 0;
	while(!(TWCR & TWI_TWINT))
     484:	80 91 74 00 	lds	r24, 0x0074
     488:	87 ff       	sbrs	r24, 7
     48a:	ef cf       	rjmp	.-34     	; 0x46a <read_temp+0x8e>
	{
		loop_cnt ++;
		if(loop_cnt >= 0x1000) return 0x4002;
	}; /* wait Start condition sent */
	if((TWSR & TWI_STATUS_MASK) != MR_DATA_ACK) 
     48c:	80 91 71 00 	lds	r24, 0x0071
     490:	88 7f       	andi	r24, 0xF8	; 248
     492:	80 35       	cpi	r24, 0x50	; 80
     494:	f1 f4       	brne	.+60     	; 0x4d2 <read_temp+0xf6>
	{
		/* No ack flag */
		return 0x8000; 
	}  
    data = TWDR << 8;
     496:	40 91 73 00 	lds	r20, 0x0073
	TWCR = TWI_TWINT | TWI_ENABLE; /* SLA ACK not transmitted at last byte */
     49a:	84 e8       	ldi	r24, 0x84	; 132
     49c:	80 93 74 00 	sts	0x0074, r24
	loop_cnt = 0;
     4a0:	1a 82       	std	Y+2, r1	; 0x02
     4a2:	19 82       	std	Y+1, r1	; 0x01
     4a4:	0d c0       	rjmp	.+26     	; 0x4c0 <read_temp+0xe4>
	while(!(TWCR & TWI_TWINT)){
		loop_cnt ++;
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	9a 83       	std	Y+2, r25	; 0x02
     4ae:	89 83       	std	Y+1, r24	; 0x01
		if(loop_cnt >= 0x1000) return 0x4003;
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	9a 81       	ldd	r25, Y+2	; 0x02
     4b4:	80 50       	subi	r24, 0x00	; 0
     4b6:	90 41       	sbci	r25, 0x10	; 16
     4b8:	18 f0       	brcs	.+6      	; 0x4c0 <read_temp+0xe4>
     4ba:	23 e0       	ldi	r18, 0x03	; 3
     4bc:	30 e4       	ldi	r19, 0x40	; 64
     4be:	19 c0       	rjmp	.+50     	; 0x4f2 <read_temp+0x116>
		return 0x8000; 
	}  
    data = TWDR << 8;
	TWCR = TWI_TWINT | TWI_ENABLE; /* SLA ACK not transmitted at last byte */
	loop_cnt = 0;
	while(!(TWCR & TWI_TWINT)){
     4c0:	80 91 74 00 	lds	r24, 0x0074
     4c4:	87 ff       	sbrs	r24, 7
     4c6:	ef cf       	rjmp	.-34     	; 0x4a6 <read_temp+0xca>
		loop_cnt ++;
		if(loop_cnt >= 0x1000) return 0x4003;
	}; /* wait Start condition sent */
	if((TWSR & TWI_STATUS_MASK) != MR_DATA_NACK) 
     4c8:	80 91 71 00 	lds	r24, 0x0071
     4cc:	88 7f       	andi	r24, 0xF8	; 248
     4ce:	88 35       	cpi	r24, 0x58	; 88
     4d0:	19 f0       	breq	.+6      	; 0x4d8 <read_temp+0xfc>
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e8       	ldi	r19, 0x80	; 128
     4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <read_temp+0x116>
	{
		/* No ack flag */
		return 0x8000; 
	}
	data |= TWDR;
     4d8:	80 91 73 00 	lds	r24, 0x0073
	if((TWSR & TWI_STATUS_MASK) != MR_DATA_ACK) 
	{
		/* No ack flag */
		return 0x8000; 
	}  
    data = TWDR << 8;
     4dc:	34 2f       	mov	r19, r20
     4de:	20 e0       	ldi	r18, 0x00	; 0
	{
		/* No ack flag */
		return 0x8000; 
	}
	data |= TWDR;
	TWCR = TWI_TWINT | TWI_ENABLE | TWI_STOP;
     4e0:	44 e9       	ldi	r20, 0x94	; 148
     4e2:	40 93 74 00 	sts	0x0074, r20
	/* 9 bit defaults */
	return data >> 8;
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	28 2b       	or	r18, r24
     4ea:	39 2b       	or	r19, r25
     4ec:	23 2f       	mov	r18, r19
     4ee:	33 0f       	add	r19, r19
     4f0:	33 0b       	sbc	r19, r19
}
     4f2:	c9 01       	movw	r24, r18
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	cf 91       	pop	r28
     4fa:	df 91       	pop	r29
     4fc:	08 95       	ret

000004fe <init_adc>:
* Per ADC channel conv time   =  6.500000 uS
*--------------------------------------------------------------
*/
void init_adc(void)
{
	ADMUX = ADC_AREF;
     4fe:	17 b8       	out	0x07, r1	; 7
	ADCSRA = ADC_EN | ADC_CLK_DIV_4;
     500:	82 e8       	ldi	r24, 0x82	; 130
     502:	86 b9       	out	0x06, r24	; 6
}
     504:	08 95       	ret

00000506 <get_adc_value>:
unsigned int get_adc_value(UINT8 ch)
{
	UINT8	i,adcl;
	UINT16	v;
	ADMUX &= ~0x1F;
     506:	97 b1       	in	r25, 0x07	; 7
     508:	90 7e       	andi	r25, 0xE0	; 224
     50a:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (ch & 0x7);
     50c:	97 b1       	in	r25, 0x07	; 7
     50e:	87 70       	andi	r24, 0x07	; 7
     510:	89 2b       	or	r24, r25
     512:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0x40;
     514:	36 9a       	sbi	0x06, 6	; 6
	while( !(ADCSRA & (1 << ADIF))); 
     516:	34 9b       	sbis	0x06, 4	; 6
     518:	fe cf       	rjmp	.-4      	; 0x516 <get_adc_value+0x10>
	adcl = ADCL;
     51a:	24 b1       	in	r18, 0x04	; 4
	v = (ADCH << 8) | adcl;
     51c:	45 b1       	in	r20, 0x05	; 5
     51e:	94 2f       	mov	r25, r20
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	28 2b       	or	r18, r24
     526:	39 2b       	or	r19, r25
	return v;
}
     528:	c9 01       	movw	r24, r18
     52a:	08 95       	ret

0000052c <__vector_16>:
// tone

unsigned char cTone_Interval, bTone_Dir, bTone_Start;

ISR(TIMER0_OVF_vect)
{
     52c:	1f 92       	push	r1
     52e:	0f 92       	push	r0
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	0f 92       	push	r0
     534:	11 24       	eor	r1, r1
     536:	8f 93       	push	r24
     538:	9f 93       	push	r25
	PORTB = (bTone_Start) ? 0x00: 0x10;
     53a:	90 91 26 04 	lds	r25, 0x0426
     53e:	99 23       	and	r25, r25
     540:	11 f4       	brne	.+4      	; 0x546 <__vector_16+0x1a>
     542:	80 e1       	ldi	r24, 0x10	; 16
     544:	01 c0       	rjmp	.+2      	; 0x548 <__vector_16+0x1c>
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	88 bb       	out	0x18, r24	; 24
	bTone_Start = !bTone_Start;
     54a:	10 92 26 04 	sts	0x0426, r1
     54e:	99 23       	and	r25, r25
     550:	19 f4       	brne	.+6      	; 0x558 <__vector_16+0x2c>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 26 04 	sts	0x0426, r24

	if(bTone_Dir){	
     558:	80 91 c1 08 	lds	r24, 0x08C1
     55c:	90 91 ac 04 	lds	r25, 0x04AC
     560:	88 23       	and	r24, r24
     562:	49 f0       	breq	.+18     	; 0x576 <__vector_16+0x4a>
		cTone_Interval++;
     564:	89 2f       	mov	r24, r25
     566:	8f 5f       	subi	r24, 0xFF	; 255
     568:	80 93 ac 04 	sts	0x04AC, r24
		if(cTone_Interval >= 0xff)
     56c:	8f 3f       	cpi	r24, 0xFF	; 255
     56e:	61 f4       	brne	.+24     	; 0x588 <__vector_16+0x5c>
			bTone_Dir = 0;
     570:	10 92 c1 08 	sts	0x08C1, r1
     574:	09 c0       	rjmp	.+18     	; 0x588 <__vector_16+0x5c>
	}
	else{
		cTone_Interval--;
     576:	89 2f       	mov	r24, r25
     578:	81 50       	subi	r24, 0x01	; 1
     57a:	80 93 ac 04 	sts	0x04AC, r24
		if(cTone_Interval <= 0x00)
     57e:	88 23       	and	r24, r24
     580:	19 f4       	brne	.+6      	; 0x588 <__vector_16+0x5c>
			bTone_Dir = 1;	
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	80 93 c1 08 	sts	0x08C1, r24
	}
	TCNT0 = cTone_Interval;
     588:	80 91 ac 04 	lds	r24, 0x04AC
     58c:	82 bf       	out	0x32, r24	; 50
}
     58e:	9f 91       	pop	r25
     590:	8f 91       	pop	r24
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti

0000059c <tone_generator>:


void tone_generator(int ac, char *av[])
{
    UINT8 c;
	DDRB = 1 << 4;
     59c:	80 e1       	ldi	r24, 0x10	; 16
     59e:	87 bb       	out	0x17, r24	; 23

	TCCR0 = _BV(CS02);				
     5a0:	84 e0       	ldi	r24, 0x04	; 4
     5a2:	83 bf       	out	0x33, r24	; 51
	TCNT0 = cTone_Interval = 1;
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	90 93 ac 04 	sts	0x04AC, r25
     5aa:	92 bf       	out	0x32, r25	; 50
	TIMSK |= _BV(TOIE0);
     5ac:	87 b7       	in	r24, 0x37	; 55
     5ae:	81 60       	ori	r24, 0x01	; 1
     5b0:	87 bf       	out	0x37, r24	; 55

	bTone_Start		= 0;
     5b2:	10 92 26 04 	sts	0x0426, r1
	bTone_Dir		= 1;
     5b6:	90 93 c1 08 	sts	0x08C1, r25

	sei();
     5ba:	78 94       	sei
/*
* Function tx_char without interrupt mode 
*/
UINT8 rx_char0(void)
{
	while(!(UCSR0A & _BV(RXC0)));
     5bc:	5f 9b       	sbis	0x0b, 7	; 11
     5be:	fe cf       	rjmp	.-4      	; 0x5bc <tone_generator+0x20>
	return UDR0;
     5c0:	8c b1       	in	r24, 0x0c	; 12

	sei();
	while(1)
	{
		c = rx_char0();
		if(c == 'q')
     5c2:	81 37       	cpi	r24, 0x71	; 113
     5c4:	d9 f7       	brne	.-10     	; 0x5bc <tone_generator+0x20>
		{
			TCCR0 = 0;
     5c6:	13 be       	out	0x33, r1	; 51
			break;
		}
	}
}
     5c8:	08 95       	ret

000005ca <motor_test>:
void motor_test(int ac, char *av[])
{
    static UINT8 button1_state = 0;
	static UINT8 button2_state = 0;
	UINT8 forward = 0;
	PORTB = 7 << 5;   
     5ca:	80 ee       	ldi	r24, 0xE0	; 224
     5cc:	88 bb       	out	0x18, r24	; 24
     5ce:	90 91 3c 03 	lds	r25, 0x033C
     5d2:	20 91 3d 03 	lds	r18, 0x033D
     5d6:	30 e0       	ldi	r19, 0x00	; 0
	while(1)
	{
		if(button1_state == 0 && !(PINE & ( 1 << 4)))
		{
			button1_state = 1;
			PORTA ^= 1;
     5d8:	41 e0       	ldi	r20, 0x01	; 1
			if(forward)
				PORTB = (0x2 << 6);
            	else 
				PORTB =  (0x1 << 6);
     5da:	70 e4       	ldi	r23, 0x40	; 64
		if(button1_state == 0 && !(PINE & ( 1 << 4)))
		{
			button1_state = 1;
			PORTA ^= 1;
			if(forward)
				PORTB = (0x2 << 6);
     5dc:	60 e8       	ldi	r22, 0x80	; 128
			button1_state = 0;
		}
		if(button2_state == 0 && !(PINE & ( 1 << 5)))
		{
			button2_state = 1;
			PORTA ^= 2;
     5de:	52 e0       	ldi	r21, 0x02	; 2
	static UINT8 button2_state = 0;
	UINT8 forward = 0;
	PORTB = 7 << 5;   
	while(1)
	{
		if(button1_state == 0 && !(PINE & ( 1 << 4)))
     5e0:	22 23       	and	r18, r18
     5e2:	89 f4       	brne	.+34     	; 0x606 <motor_test+0x3c>
     5e4:	0c 99       	sbic	0x01, 4	; 1
     5e6:	13 c0       	rjmp	.+38     	; 0x60e <motor_test+0x44>
		{
			button1_state = 1;
			PORTA ^= 1;
     5e8:	8b b3       	in	r24, 0x1b	; 27
     5ea:	84 27       	eor	r24, r20
     5ec:	8b bb       	out	0x1b, r24	; 27
			if(forward)
     5ee:	33 23       	and	r19, r19
     5f0:	11 f0       	breq	.+4      	; 0x5f6 <motor_test+0x2c>
				PORTB = (0x2 << 6);
     5f2:	68 bb       	out	0x18, r22	; 24
     5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <motor_test+0x2e>
            	else 
				PORTB =  (0x1 << 6);
     5f6:	78 bb       	out	0x18, r23	; 24
            			forward = !forward;
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	33 23       	and	r19, r19
     5fc:	09 f4       	brne	.+2      	; 0x600 <motor_test+0x36>
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	38 2f       	mov	r19, r24
     602:	21 e0       	ldi	r18, 0x01	; 1
     604:	04 c0       	rjmp	.+8      	; 0x60e <motor_test+0x44>
		}
		else if(button1_state == 1 && (PINE & ( 1 << 4)))
     606:	21 30       	cpi	r18, 0x01	; 1
     608:	11 f4       	brne	.+4      	; 0x60e <motor_test+0x44>
     60a:	0c 99       	sbic	0x01, 4	; 1
     60c:	20 e0       	ldi	r18, 0x00	; 0
		{
			button1_state = 0;
		}
		if(button2_state == 0 && !(PINE & ( 1 << 5)))
     60e:	99 23       	and	r25, r25
     610:	39 f4       	brne	.+14     	; 0x620 <motor_test+0x56>
     612:	0d 99       	sbic	0x01, 5	; 1
     614:	e5 cf       	rjmp	.-54     	; 0x5e0 <motor_test+0x16>
		{
			button2_state = 1;
			PORTA ^= 2;
     616:	8b b3       	in	r24, 0x1b	; 27
     618:	85 27       	eor	r24, r21
     61a:	8b bb       	out	0x1b, r24	; 27
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	e0 cf       	rjmp	.-64     	; 0x5e0 <motor_test+0x16>
		}
		else if(button2_state == 1 && (PINE & ( 1 << 5)))
     620:	91 30       	cpi	r25, 0x01	; 1
     622:	f1 f6       	brne	.-68     	; 0x5e0 <motor_test+0x16>
     624:	81 b1       	in	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	e5 e0       	ldi	r30, 0x05	; 5
     62a:	96 95       	lsr	r25
     62c:	87 95       	ror	r24
     62e:	ea 95       	dec	r30
     630:	e1 f7       	brne	.-8      	; 0x62a <motor_test+0x60>
     632:	98 2f       	mov	r25, r24
     634:	91 70       	andi	r25, 0x01	; 1
     636:	94 27       	eor	r25, r20
     638:	d3 cf       	rjmp	.-90     	; 0x5e0 <motor_test+0x16>

0000063a <tohigh>:
UINT8 cmd_buf[1024];
UINT8 param_buf[16];


void tohigh(char *line)
{
     63a:	fc 01       	movw	r30, r24
     63c:	07 c0       	rjmp	.+14     	; 0x64c <tohigh+0x12>
	while(*line) {
		if(*line >= 'a' && *line <= 'z')
     63e:	89 2f       	mov	r24, r25
     640:	81 56       	subi	r24, 0x61	; 97
     642:	8a 31       	cpi	r24, 0x1A	; 26
     644:	10 f4       	brcc	.+4      	; 0x64a <tohigh+0x10>
			*line -= ' ';
     646:	90 52       	subi	r25, 0x20	; 32
     648:	90 83       	st	Z, r25
		line++;
     64a:	31 96       	adiw	r30, 0x01	; 1
UINT8 param_buf[16];


void tohigh(char *line)
{
	while(*line) {
     64c:	90 81       	ld	r25, Z
     64e:	99 23       	and	r25, r25
     650:	b1 f7       	brne	.-20     	; 0x63e <tohigh+0x4>
		if(*line >= 'a' && *line <= 'z')
			*line -= ' ';
		line++;
	}
}
     652:	08 95       	ret

00000654 <hatoi>:
int hatoi(char *s)
{
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	ec 01       	movw	r28, r24
	register int	t, n = 0;
	tohigh(s);
     65a:	0e 94 1d 03 	call	0x63a	; 0x63a <tohigh>
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	22 c0       	rjmp	.+68     	; 0x6a8 <hatoi+0x54>
	while ((t = *s) != 0) {	
		if (t >= '0' && t <= '9') {
     664:	9c 01       	movw	r18, r24
     666:	20 53       	subi	r18, 0x30	; 48
     668:	30 40       	sbci	r19, 0x00	; 0
     66a:	2a 30       	cpi	r18, 0x0A	; 10
     66c:	31 05       	cpc	r19, r1
     66e:	10 f4       	brcc	.+4      	; 0x674 <hatoi+0x20>
			t = t - '0';		
     670:	c9 01       	movw	r24, r18
     672:	12 c0       	rjmp	.+36     	; 0x698 <hatoi+0x44>
		} else {			
			t |= 0x20;
     674:	9c 01       	movw	r18, r24
     676:	20 62       	ori	r18, 0x20	; 32
			if(t >= 'a' && t <= 'f') t = t - 'a' + 10;
     678:	c9 01       	movw	r24, r18
     67a:	81 56       	subi	r24, 0x61	; 97
     67c:	90 40       	sbci	r25, 0x00	; 0
     67e:	06 97       	sbiw	r24, 0x06	; 6
     680:	20 f4       	brcc	.+8      	; 0x68a <hatoi+0x36>
     682:	c9 01       	movw	r24, r18
     684:	87 55       	subi	r24, 0x57	; 87
     686:	90 40       	sbci	r25, 0x00	; 0
     688:	07 c0       	rjmp	.+14     	; 0x698 <hatoi+0x44>
			else if(t >= 'A' && t <= 'F') t = t - 'A' + 10;
     68a:	c9 01       	movw	r24, r18
     68c:	81 54       	subi	r24, 0x41	; 65
     68e:	90 40       	sbci	r25, 0x00	; 0
     690:	06 97       	sbiw	r24, 0x06	; 6
     692:	70 f4       	brcc	.+28     	; 0x6b0 <hatoi+0x5c>
     694:	c9 01       	movw	r24, r18
     696:	c7 97       	sbiw	r24, 0x37	; 55
			else 	return(n);
		}	
		n = (n << 4) + t;
     698:	f4 e0       	ldi	r31, 0x04	; 4
     69a:	44 0f       	add	r20, r20
     69c:	55 1f       	adc	r21, r21
     69e:	fa 95       	dec	r31
     6a0:	e1 f7       	brne	.-8      	; 0x69a <hatoi+0x46>
     6a2:	48 0f       	add	r20, r24
     6a4:	59 1f       	adc	r21, r25
		s++;
     6a6:	21 96       	adiw	r28, 0x01	; 1
}
int hatoi(char *s)
{
	register int	t, n = 0;
	tohigh(s);
	while ((t = *s) != 0) {	
     6a8:	88 81       	ld	r24, Y
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	00 97       	sbiw	r24, 0x00	; 0
     6ae:	d1 f6       	brne	.-76     	; 0x664 <hatoi+0x10>
		}	
		n = (n << 4) + t;
		s++;
	}	
	return(n);
}
     6b0:	ca 01       	movw	r24, r20
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <my_atoi>:

int my_atoi(char *s)
{
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	ec 01       	movw	r28, r24
	register int	t, n = 0;
	tohigh(s);
     6be:	0e 94 1d 03 	call	0x63a	; 0x63a <tohigh>
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	13 c0       	rjmp	.+38     	; 0x6ee <my_atoi+0x36>
	while ((t = *s) != 0) {	
		if (t >= '0' && t <= '9') {
     6c8:	ca 01       	movw	r24, r20
     6ca:	c0 97       	sbiw	r24, 0x30	; 48
     6cc:	8a 30       	cpi	r24, 0x0A	; 10
     6ce:	91 05       	cpc	r25, r1
     6d0:	08 f4       	brcc	.+2      	; 0x6d4 <my_atoi+0x1c>
			t = t - '0';		
     6d2:	ac 01       	movw	r20, r24
		} 
		n = (n * 10) + t;
     6d4:	c9 01       	movw	r24, r18
     6d6:	b3 e0       	ldi	r27, 0x03	; 3
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	ba 95       	dec	r27
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <my_atoi+0x20>
     6e0:	22 0f       	add	r18, r18
     6e2:	33 1f       	adc	r19, r19
     6e4:	28 0f       	add	r18, r24
     6e6:	39 1f       	adc	r19, r25
     6e8:	24 0f       	add	r18, r20
     6ea:	35 1f       	adc	r19, r21
		s++;
     6ec:	21 96       	adiw	r28, 0x01	; 1

int my_atoi(char *s)
{
	register int	t, n = 0;
	tohigh(s);
	while ((t = *s) != 0) {	
     6ee:	88 81       	ld	r24, Y
     6f0:	48 2f       	mov	r20, r24
     6f2:	50 e0       	ldi	r21, 0x00	; 0
     6f4:	41 15       	cp	r20, r1
     6f6:	51 05       	cpc	r21, r1
     6f8:	39 f7       	brne	.-50     	; 0x6c8 <my_atoi+0x10>
		} 
		n = (n * 10) + t;
		s++;
	}	
	return(n);
}
     6fa:	c9 01       	movw	r24, r18
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <h_atoi>:

h_atoi(char *s)
{
     702:	fc 01       	movw	r30, r24
	if(s[0] == '0' && s[1] == 'x') return hatoi(s+2);
     704:	80 81       	ld	r24, Z
     706:	80 33       	cpi	r24, 0x30	; 48
     708:	41 f4       	brne	.+16     	; 0x71a <h_atoi+0x18>
     70a:	81 81       	ldd	r24, Z+1	; 0x01
     70c:	88 37       	cpi	r24, 0x78	; 120
     70e:	29 f4       	brne	.+10     	; 0x71a <h_atoi+0x18>
     710:	cf 01       	movw	r24, r30
     712:	02 96       	adiw	r24, 0x02	; 2
     714:	0e 94 2a 03 	call	0x654	; 0x654 <hatoi>
     718:	08 95       	ret
	return my_atoi(s);
     71a:	cf 01       	movw	r24, r30
     71c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <my_atoi>
}
     720:	08 95       	ret

00000722 <delay_us>:

unsigned char delay_us(int v)
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
     722:	42 b7       	in	r20, 0x32	; 50
	delay = 16 * v;
     724:	9c 01       	movw	r18, r24
     726:	84 e0       	ldi	r24, 0x04	; 4
     728:	22 0f       	add	r18, r18
     72a:	33 1f       	adc	r19, r19
     72c:	8a 95       	dec	r24
     72e:	e1 f7       	brne	.-8      	; 0x728 <delay_us+0x6>
     730:	06 c0       	rjmp	.+12     	; 0x73e <delay_us+0x1c>
	while(delay > 0)
	{
		next = TCNT0;
     732:	92 b7       	in	r25, 0x32	; 50
		delay -= (next - cur) & 0xff;
     734:	89 2f       	mov	r24, r25
     736:	84 1b       	sub	r24, r20
     738:	28 1b       	sub	r18, r24
     73a:	31 09       	sbc	r19, r1
     73c:	49 2f       	mov	r20, r25
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
	delay = 16 * v;
	while(delay > 0)
     73e:	12 16       	cp	r1, r18
     740:	13 06       	cpc	r1, r19
     742:	bc f3       	brlt	.-18     	; 0x732 <delay_us+0x10>
		next = TCNT0;
		delay -= (next - cur) & 0xff;
		cur = next;
	}
	return cur;
}
     744:	84 2f       	mov	r24, r20
     746:	08 95       	ret

00000748 <LCD_write_ram>:
			}
		}
	}
}
void LCD_write_ram(unsigned int v, unsigned  int num)
{
     748:	48 2f       	mov	r20, r24
    unsigned int i;
	//    PORTB = PORTB & ~(LCD_RS | LCD_nCS);
	//    PORTB = PORTB & ~(LCD_RS | LCD_nCS);
	//    PORTB = PORTB & ~(LCD_RS | LCD_nCS);
    CLR_CS();
     74a:	c7 98       	cbi	0x18, 7	; 24
	CLR_RS();
     74c:	c6 98       	cbi	0x18, 6	; 24
    OUT16(0x22);
     74e:	15 ba       	out	0x15, r1	; 21
     750:	82 e2       	ldi	r24, 0x22	; 34
     752:	8b bb       	out	0x1b, r24	; 27
	
	CLR_WR();
     754:	c5 98       	cbi	0x18, 5	; 24
	HIGH_WR();
     756:	c5 9a       	sbi	0x18, 5	; 24
    HIGH_RS();
     758:	c6 9a       	sbi	0x18, 6	; 24
	
	for( i = 0 ; i < num ; i ++)
	{
		OUT16(v);
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	06 c0       	rjmp	.+12     	; 0x76c <LCD_write_ram+0x24>
	
	CLR_WR();
	HIGH_WR();
    HIGH_RS();
	
	for( i = 0 ; i < num ; i ++)
     760:	95 bb       	out	0x15, r25	; 21
	{
		OUT16(v);
     762:	4b bb       	out	0x1b, r20	; 27
		CLR_WR();
     764:	c5 98       	cbi	0x18, 5	; 24
		HIGH_WR();
     766:	c5 9a       	sbi	0x18, 5	; 24
	
	CLR_WR();
	HIGH_WR();
    HIGH_RS();
	
	for( i = 0 ; i < num ; i ++)
     768:	2f 5f       	subi	r18, 0xFF	; 255
     76a:	3f 4f       	sbci	r19, 0xFF	; 255
     76c:	26 17       	cp	r18, r22
     76e:	37 07       	cpc	r19, r23
     770:	b8 f3       	brcs	.-18     	; 0x760 <LCD_write_ram+0x18>
	{
		OUT16(v);
		CLR_WR();
		HIGH_WR();
	}
	HIGH_CS();
     772:	c7 9a       	sbi	0x18, 7	; 24
}
     774:	08 95       	ret

00000776 <LCD_write_reg>:

void LCD_write_reg(unsigned int addr, unsigned int v)
{
	CLR_CS();
     776:	c7 98       	cbi	0x18, 7	; 24
	OUT16(addr);
     778:	95 bb       	out	0x15, r25	; 21
     77a:	8b bb       	out	0x1b, r24	; 27
	CLR_RS();
     77c:	c6 98       	cbi	0x18, 6	; 24
	CLR_WR();
     77e:	c5 98       	cbi	0x18, 5	; 24
	HIGH_WR();
     780:	c5 9a       	sbi	0x18, 5	; 24
	HIGH_RS();
     782:	c6 9a       	sbi	0x18, 6	; 24
	
	OUT16(v);
     784:	75 bb       	out	0x15, r23	; 21
     786:	6b bb       	out	0x1b, r22	; 27
	CLR_WR();
     788:	c5 98       	cbi	0x18, 5	; 24
	HIGH_WR();
     78a:	c5 9a       	sbi	0x18, 5	; 24
	HIGH_CS();
     78c:	c7 9a       	sbi	0x18, 7	; 24
	
	
}
     78e:	08 95       	ret

00000790 <LCD_read_reg>:


unsigned char LCD_read_reg(unsigned int addr)
{
    unsigned char v;
    CLR_CS();
     790:	c7 98       	cbi	0x18, 7	; 24
	OUT16(addr);
     792:	95 bb       	out	0x15, r25	; 21
     794:	8b bb       	out	0x1b, r24	; 27
	CLR_RS();
     796:	c6 98       	cbi	0x18, 6	; 24
	CLR_WR();
     798:	c5 98       	cbi	0x18, 5	; 24
	//delay_ms(1);
	HIGH_WR();
     79a:	c5 9a       	sbi	0x18, 5	; 24
	HIGH_RS();
     79c:	c6 9a       	sbi	0x18, 6	; 24
	BUS_INPUT();
     79e:	14 ba       	out	0x14, r1	; 20
     7a0:	1a ba       	out	0x1a, r1	; 26
	CLR_RD();
     7a2:	c4 98       	cbi	0x18, 4	; 24

unsigned char delay_us(int v)
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
     7a4:	82 b7       	in	r24, 0x32	; 50
     7a6:	20 e1       	ldi	r18, 0x10	; 16
     7a8:	30 e0       	ldi	r19, 0x00	; 0
	delay = 16 * v;
	while(delay > 0)
	{
		next = TCNT0;
     7aa:	92 b7       	in	r25, 0x32	; 50
		delay -= (next - cur) & 0xff;
     7ac:	49 2f       	mov	r20, r25
     7ae:	48 1b       	sub	r20, r24
     7b0:	24 1b       	sub	r18, r20
     7b2:	31 09       	sbc	r19, r1
     7b4:	89 2f       	mov	r24, r25
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
	delay = 16 * v;
	while(delay > 0)
     7b6:	12 16       	cp	r1, r18
     7b8:	13 06       	cpc	r1, r19
     7ba:	bc f3       	brlt	.-18     	; 0x7aa <LCD_read_reg+0x1a>
	HIGH_WR();
	HIGH_RS();
	BUS_INPUT();
	CLR_RD();
	delay_us(1);
	v = PINA; // dummy read 
     7bc:	89 b3       	in	r24, 0x19	; 25
	HIGH_RD();
     7be:	c4 9a       	sbi	0x18, 4	; 24
	//	delay_ms(1);
	CLR_RD();
     7c0:	c4 98       	cbi	0x18, 4	; 24

unsigned char delay_us(int v)
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
     7c2:	82 b7       	in	r24, 0x32	; 50
     7c4:	20 e1       	ldi	r18, 0x10	; 16
     7c6:	30 e0       	ldi	r19, 0x00	; 0
	delay = 16 * v;
	while(delay > 0)
	{
		next = TCNT0;
     7c8:	92 b7       	in	r25, 0x32	; 50
		delay -= (next - cur) & 0xff;
     7ca:	49 2f       	mov	r20, r25
     7cc:	48 1b       	sub	r20, r24
     7ce:	24 1b       	sub	r18, r20
     7d0:	31 09       	sbc	r19, r1
     7d2:	89 2f       	mov	r24, r25
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
	delay = 16 * v;
	while(delay > 0)
     7d4:	12 16       	cp	r1, r18
     7d6:	13 06       	cpc	r1, r19
     7d8:	bc f3       	brlt	.-18     	; 0x7c8 <LCD_read_reg+0x38>
	v = PINA; // dummy read 
	HIGH_RD();
	//	delay_ms(1);
	CLR_RD();
	delay_us(1);
	v = PINA;
     7da:	89 b3       	in	r24, 0x19	; 25
	HIGH_RD();
     7dc:	c4 9a       	sbi	0x18, 4	; 24
	HIGH_CS();
     7de:	c7 9a       	sbi	0x18, 7	; 24
	BUS_OUTPUT();
     7e0:	9f ef       	ldi	r25, 0xFF	; 255
     7e2:	94 bb       	out	0x14, r25	; 20
     7e4:	9a bb       	out	0x1a, r25	; 26
	return v;
}
     7e6:	08 95       	ret

000007e8 <LCD_set_region>:

LCD_set_region(unsigned char sx, unsigned char sy, unsigned char ex, unsigned char ey)
{
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	38 2f       	mov	r19, r24
     7f0:	06 2f       	mov	r16, r22
     7f2:	14 2f       	mov	r17, r20
     7f4:	f2 2e       	mov	r15, r18
    LCD_write_reg(0x3, sx);
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	63 2f       	mov	r22, r19
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
	LCD_write_reg(0x5, ex);
     802:	85 e0       	ldi	r24, 0x05	; 5
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	61 2f       	mov	r22, r17
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
	LCD_write_reg(0x7, sy);
     80e:	87 e0       	ldi	r24, 0x07	; 7
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	60 2f       	mov	r22, r16
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
	LCD_write_reg(0x9, ey);
     81a:	89 e0       	ldi	r24, 0x09	; 9
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	6f 2d       	mov	r22, r15
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
}
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	08 95       	ret

0000082e <init_lcd>:

init_lcd()
{
    int i,j;
	
    CLR_RESET();
     82e:	95 98       	cbi	0x12, 5	; 18
    delay_ms(20);
     830:	84 e1       	ldi	r24, 0x14	; 20
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>
	HIGH_RESET();
     838:	95 9a       	sbi	0x12, 5	; 18
	//   PORTD &= ~LCD_LED;
    
    delay_ms(20);
     83a:	84 e1       	ldi	r24, 0x14	; 20
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>
	
    LCD_write_reg(0x60, 0x00);
     842:	80 e6       	ldi	r24, 0x60	; 96
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x61, 0x06);
     84e:	81 e6       	ldi	r24, 0x61	; 97
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	66 e0       	ldi	r22, 0x06	; 6
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x62, 0x00);
     85a:	82 e6       	ldi	r24, 0x62	; 98
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x63, 0xd9);
     866:	83 e6       	ldi	r24, 0x63	; 99
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	69 ed       	ldi	r22, 0xD9	; 217
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x73, 0x70);
     872:	83 e7       	ldi	r24, 0x73	; 115
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	60 e7       	ldi	r22, 0x70	; 112
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
	
    LCD_write_reg(0x40, 0x20);
     87e:	80 e4       	ldi	r24, 0x40	; 64
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	60 e2       	ldi	r22, 0x20	; 32
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x41, 0x41);
     88a:	81 e4       	ldi	r24, 0x41	; 65
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	61 e4       	ldi	r22, 0x41	; 65
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x42, 0x41);
     896:	82 e4       	ldi	r24, 0x42	; 66
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	61 e4       	ldi	r22, 0x41	; 65
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x43, 0x01);
     8a2:	83 e4       	ldi	r24, 0x43	; 67
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	61 e0       	ldi	r22, 0x01	; 1
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x44, 0x34);
     8ae:	84 e4       	ldi	r24, 0x44	; 68
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	64 e3       	ldi	r22, 0x34	; 52
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x45, 0x02);
     8ba:	85 e4       	ldi	r24, 0x45	; 69
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	62 e0       	ldi	r22, 0x02	; 2
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x46, 0x08);
     8c6:	86 e4       	ldi	r24, 0x46	; 70
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	68 e0       	ldi	r22, 0x08	; 8
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x47, 0xd1);
     8d2:	87 e4       	ldi	r24, 0x47	; 71
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	61 ed       	ldi	r22, 0xD1	; 209
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x48, 0x05);
     8de:	88 e4       	ldi	r24, 0x48	; 72
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	65 e0       	ldi	r22, 0x05	; 5
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x50, 0x67);
     8ea:	80 e5       	ldi	r24, 0x50	; 80
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	67 e6       	ldi	r22, 0x67	; 103
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x51, 0x00);
     8f6:	81 e5       	ldi	r24, 0x51	; 81
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x52, 0x27);
     902:	82 e5       	ldi	r24, 0x52	; 82
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	67 e2       	ldi	r22, 0x27	; 39
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x53, 0x0b);
     90e:	83 e5       	ldi	r24, 0x53	; 83
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	6b e0       	ldi	r22, 0x0B	; 11
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x54, 0x83);
     91a:	84 e5       	ldi	r24, 0x54	; 84
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	63 e8       	ldi	r22, 0x83	; 131
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x55, 0x0e);
     926:	85 e5       	ldi	r24, 0x55	; 85
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	6e e0       	ldi	r22, 0x0E	; 14
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x56, 0x01);
     932:	86 e5       	ldi	r24, 0x56	; 86
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x57, 0x37);
     93e:	87 e5       	ldi	r24, 0x57	; 87
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	67 e3       	ldi	r22, 0x37	; 55
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
	
    LCD_write_reg(0x1F, 0x03);
     94a:	8f e1       	ldi	r24, 0x1F	; 31
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	63 e0       	ldi	r22, 0x03	; 3
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x20, 0x02);
     956:	80 e2       	ldi	r24, 0x20	; 32
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	62 e0       	ldi	r22, 0x02	; 2
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x24, 0x1C);
     962:	84 e2       	ldi	r24, 0x24	; 36
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	6c e1       	ldi	r22, 0x1C	; 28
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x25, 0x34);
     96e:	85 e2       	ldi	r24, 0x25	; 37
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	64 e3       	ldi	r22, 0x34	; 52
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
	
    LCD_write_reg(0x23, 0x54);
     97a:	83 e2       	ldi	r24, 0x23	; 35
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	64 e5       	ldi	r22, 0x54	; 84
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
	
    LCD_write_reg(0x18, 0x44);
     986:	88 e1       	ldi	r24, 0x18	; 24
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	64 e4       	ldi	r22, 0x44	; 68
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x1B, 0x44);
     992:	8b e1       	ldi	r24, 0x1B	; 27
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	64 e4       	ldi	r22, 0x44	; 68
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x21, 0x01);
     99e:	81 e2       	ldi	r24, 0x21	; 33
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	61 e0       	ldi	r22, 0x01	; 1
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x01, 0x00);
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x1C, 0x03);
     9b6:	8c e1       	ldi	r24, 0x1C	; 28
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	63 e0       	ldi	r22, 0x03	; 3
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x19, 0x06);
     9c2:	89 e1       	ldi	r24, 0x19	; 25
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	66 e0       	ldi	r22, 0x06	; 6
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    delay_ms(10);
     9ce:	8a e0       	ldi	r24, 0x0A	; 10
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>
	
    LCD_write_reg(0x17, 0x05);
     9d6:	87 e1       	ldi	r24, 0x17	; 23
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	65 e0       	ldi	r22, 0x05	; 5
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x26, 0x84);
     9e2:	86 e2       	ldi	r24, 0x26	; 38
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	64 e8       	ldi	r22, 0x84	; 132
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    delay_ms(80);
     9ee:	80 e5       	ldi	r24, 0x50	; 80
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>
    LCD_write_reg(0x26, 0xB8);
     9f6:	86 e2       	ldi	r24, 0x26	; 38
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	68 eb       	ldi	r22, 0xB8	; 184
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    delay_ms(80);
     a02:	80 e5       	ldi	r24, 0x50	; 80
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>
    LCD_write_reg(0x26, 0xBC);
     a0a:	86 e2       	ldi	r24, 0x26	; 38
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	6c eb       	ldi	r22, 0xBC	; 188
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
	
    LCD_write_reg(0x02, 0x00);
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x03, 0x00);
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x04, 0x00);
     a2e:	84 e0       	ldi	r24, 0x04	; 4
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x05, 220-1); /* x-axis */
     a3a:	85 e0       	ldi	r24, 0x05	; 5
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	6b ed       	ldi	r22, 0xDB	; 219
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
	//    LCD_write_reg(0x05, 0xAF);
    LCD_write_reg(0x06, 0x00);
     a46:	86 e0       	ldi	r24, 0x06	; 6
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x07, 0x00);
     a52:	87 e0       	ldi	r24, 0x07	; 7
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x08, 0x00);
     a5e:	88 e0       	ldi	r24, 0x08	; 8
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x09, 176-1); /* y-axis */
     a6a:	89 e0       	ldi	r24, 0x09	; 9
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	6f ea       	ldi	r22, 0xAF	; 175
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
	//   LCD_write_reg(0x09, 0xDB);
	/* X,Y coordinate redefine */
    LCD_write_reg(0x16, 0xA8);
     a76:	86 e1       	ldi	r24, 0x16	; 22
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	68 ea       	ldi	r22, 0xA8	; 168
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
	
}
     a82:	08 95       	ret

00000a84 <draw_ortho_line>:

void draw_ortho_line(unsigned int sX,unsigned int sY,unsigned int eX,unsigned int eY,unsigned int color)
{
     a84:	8f 92       	push	r8
     a86:	9f 92       	push	r9
     a88:	af 92       	push	r10
     a8a:	bf 92       	push	r11
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	4c 01       	movw	r8, r24
     a9a:	6b 01       	movw	r12, r22
     a9c:	5a 01       	movw	r10, r20
     a9e:	79 01       	movw	r14, r18
    unsigned int num;
    LCD_write_reg(0x03, sX);
     aa0:	83 e0       	ldi	r24, 0x03	; 3
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	b4 01       	movw	r22, r8
     aa6:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x05, eX);
     aaa:	85 e0       	ldi	r24, 0x05	; 5
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	b5 01       	movw	r22, r10
     ab0:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x07, sY);
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	b6 01       	movw	r22, r12
     aba:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    LCD_write_reg(0x09, eY);
     abe:	89 e0       	ldi	r24, 0x09	; 9
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	b7 01       	movw	r22, r14
     ac4:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
    num = (eX - sX + 1) * (eY - sY + 1);
	//	delay_ms(4);
    LCD_write_ram(color,num);
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	9c 01       	movw	r18, r24
     ace:	2c 19       	sub	r18, r12
     ad0:	3d 09       	sbc	r19, r13
     ad2:	2e 0d       	add	r18, r14
     ad4:	3f 1d       	adc	r19, r15
     ad6:	88 19       	sub	r24, r8
     ad8:	99 09       	sbc	r25, r9
     ada:	8a 0d       	add	r24, r10
     adc:	9b 1d       	adc	r25, r11
     ade:	28 9f       	mul	r18, r24
     ae0:	b0 01       	movw	r22, r0
     ae2:	29 9f       	mul	r18, r25
     ae4:	70 0d       	add	r23, r0
     ae6:	38 9f       	mul	r19, r24
     ae8:	70 0d       	add	r23, r0
     aea:	11 24       	eor	r1, r1
     aec:	c8 01       	movw	r24, r16
     aee:	0e 94 a4 03 	call	0x748	; 0x748 <LCD_write_ram>
}
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	cf 90       	pop	r12
     afe:	bf 90       	pop	r11
     b00:	af 90       	pop	r10
     b02:	9f 90       	pop	r9
     b04:	8f 90       	pop	r8
     b06:	08 95       	ret

00000b08 <lcd_test>:
void init_adc(void);
unsigned int get_adc_value(unsigned char  ch);
unsigned int x_12bit, y_12bit;// x_12bit(0-4095), y_12bit(0-4095)
unsigned int x_touch, y_touch;// x_touch(0-239), y_touch(0-319)
void lcd_test(int ac, char *av[])
{
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
	
    unsigned char v;
	int i;
    DDRA = 0xFF; /* PORT A input */
     b0c:	8f ef       	ldi	r24, 0xFF	; 255
     b0e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; /* PORT C intput */
     b10:	84 bb       	out	0x14, r24	; 20
	
	DDRB = 0xff & ~(1 << 3) ; /* PORT B output ,MISO input(signal collison avoid*/
     b12:	87 ef       	ldi	r24, 0xF7	; 247
     b14:	87 bb       	out	0x17, r24	; 23
	DDRD = (LCD_RESET | LCD_LED); /* Reset and LED is output pin */
     b16:	80 e6       	ldi	r24, 0x60	; 96
     b18:	81 bb       	out	0x11, r24	; 17
	//	DDRD = (LCD_RESET | 0xe); /* Reset and LED is output pin */
    PORTB = 0xF0; /* MCU_nRD,MCU_nWR,LCD_RS, MCU_nCS all high */
     b1a:	80 ef       	ldi	r24, 0xF0	; 240
     b1c:	88 bb       	out	0x18, r24	; 24
	
    SFIOR |= PUD;
     b1e:	80 b5       	in	r24, 0x20	; 32
     b20:	82 60       	ori	r24, 0x02	; 2
     b22:	80 bd       	out	0x20, r24	; 32
	//	PORTD &= ~LCD_LED; /* LED all on */
	PORTD |= LCD_RESET | LCD_LED;  /* LCD reset */
     b24:	82 b3       	in	r24, 0x12	; 18
     b26:	80 66       	ori	r24, 0x60	; 96
     b28:	82 bb       	out	0x12, r24	; 18
	
    TCNT0 = 0;
     b2a:	12 be       	out	0x32, r1	; 50
    TCCR0 = 1; /* not scale the clock */
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	83 bf       	out	0x33, r24	; 51
	/* debug */
	
	
	init_lcd();
     b30:	0e 94 17 04 	call	0x82e	; 0x82e <init_lcd>
    PORTD  &= ~LCD_LED;
     b34:	96 98       	cbi	0x12, 6	; 18
	//  LCD_write_ram(RGB(0,255,0), 20000-1);
	
#if 1
	while(1)
	{
		draw_ortho_line(0,0,219,176,RGB(255,0,0));
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	4b ed       	ldi	r20, 0xDB	; 219
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	20 eb       	ldi	r18, 0xB0	; 176
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	00 e0       	ldi	r16, 0x00	; 0
     b48:	18 ef       	ldi	r17, 0xF8	; 248
     b4a:	0e 94 42 05 	call	0xa84	; 0xa84 <draw_ortho_line>
		delay_ms(1000);
     b4e:	88 ee       	ldi	r24, 0xE8	; 232
     b50:	93 e0       	ldi	r25, 0x03	; 3
     b52:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>
		draw_ortho_line(0,0,219,176,RGB(0,255,0));
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	4b ed       	ldi	r20, 0xDB	; 219
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	20 eb       	ldi	r18, 0xB0	; 176
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	00 ee       	ldi	r16, 0xE0	; 224
     b68:	17 e0       	ldi	r17, 0x07	; 7
     b6a:	0e 94 42 05 	call	0xa84	; 0xa84 <draw_ortho_line>
		delay_ms(1000);
     b6e:	88 ee       	ldi	r24, 0xE8	; 232
     b70:	93 e0       	ldi	r25, 0x03	; 3
     b72:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>
		draw_ortho_line(0,0,219,176,RGB(0,0,255));
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	4b ed       	ldi	r20, 0xDB	; 219
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	20 eb       	ldi	r18, 0xB0	; 176
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	0f e1       	ldi	r16, 0x1F	; 31
     b88:	10 e0       	ldi	r17, 0x00	; 0
     b8a:	0e 94 42 05 	call	0xa84	; 0xa84 <draw_ortho_line>
		delay_ms(1000);
     b8e:	88 ee       	ldi	r24, 0xE8	; 232
     b90:	93 e0       	ldi	r25, 0x03	; 3
     b92:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>
     b96:	cf cf       	rjmp	.-98     	; 0xb36 <lcd_test+0x2e>

00000b98 <SPI_write>:
	input_ads7846(0);
}

unsigned char SPI_write(unsigned char data)
{
    SPDR = data;
     b98:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & 0x80));
     b9a:	77 9b       	sbis	0x0e, 7	; 14
     b9c:	fe cf       	rjmp	.-4      	; 0xb9a <SPI_write+0x2>
	return SPDR;
     b9e:	8f b1       	in	r24, 0x0f	; 15
}
     ba0:	08 95       	ret

00000ba2 <input_ads7846>:

unsigned int input_ads7846(unsigned char command)   /* input X, Y value from ADS7846 */
{
	unsigned int axis;
	
	PORTB &= ~1;
     ba2:	c0 98       	cbi	0x18, 0	; 24
	input_ads7846(0);
}

unsigned char SPI_write(unsigned char data)
{
    SPDR = data;
     ba4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & 0x80));
     ba6:	77 9b       	sbis	0x0e, 7	; 14
     ba8:	fe cf       	rjmp	.-4      	; 0xba6 <input_ads7846+0x4>
	return SPDR;
     baa:	8f b1       	in	r24, 0x0f	; 15
	input_ads7846(0);
}

unsigned char SPI_write(unsigned char data)
{
    SPDR = data;
     bac:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & 0x80));
     bae:	77 9b       	sbis	0x0e, 7	; 14
     bb0:	fe cf       	rjmp	.-4      	; 0xbae <input_ads7846+0xc>
	return SPDR;
     bb2:	9f b1       	in	r25, 0x0f	; 15
	input_ads7846(0);
}

unsigned char SPI_write(unsigned char data)
{
    SPDR = data;
     bb4:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & 0x80));
     bb6:	77 9b       	sbis	0x0e, 7	; 14
     bb8:	fe cf       	rjmp	.-4      	; 0xbb6 <input_ads7846+0x14>
	return SPDR;
     bba:	8f b1       	in	r24, 0x0f	; 15
	
	PORTB &= ~1;
	
	SPI_write(command);
	axis = SPI_write(0x00);                               // read high 7 bit
	axis <<= 8;
     bbc:	39 2f       	mov	r19, r25
     bbe:	20 e0       	ldi	r18, 0x00	; 0
	axis += SPI_write(0x00);                             // read low 5 bit
     bc0:	28 0f       	add	r18, r24
     bc2:	31 1d       	adc	r19, r1
	axis >>= 3;
	
	PORTB |= 1;
     bc4:	c0 9a       	sbi	0x18, 0	; 24
     bc6:	93 e0       	ldi	r25, 0x03	; 3
     bc8:	36 95       	lsr	r19
     bca:	27 95       	ror	r18
     bcc:	9a 95       	dec	r25
     bce:	e1 f7       	brne	.-8      	; 0xbc8 <input_ads7846+0x26>
	
	return axis;
}
     bd0:	c9 01       	movw	r24, r18
     bd2:	08 95       	ret

00000bd4 <init_ads7846>:
}

unsigned int input_ads7846(unsigned char command);
void init_ads7846()
{
    DDRB |= 1; /* PB0 output for SPI SS */
     bd4:	b8 9a       	sbi	0x17, 0	; 23
	SPCR = 0x51; /* 8 M / 16 = 500 Khz */
     bd6:	81 e5       	ldi	r24, 0x51	; 81
     bd8:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0;
     bda:	1e b8       	out	0x0e, r1	; 14
	input_ads7846(0);
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	0e 94 d1 05 	call	0xba2	; 0xba2 <input_ads7846>
}
     be2:	08 95       	ret

00000be4 <Read_ADS7846_touch>:
//0b11010000              // 12-bit X position measurement command
#define ADS7846_CMD_Y   0x90
// 0b10010000              // 12-bit Y position measurement command

void Read_ADS7846_touch(void)                   /* read X, Y average value from ADS7846 */
{
     be4:	ff 92       	push	r15
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
	unsigned char i;
	
	x_12bit = 0;                                                 // initial value
     bea:	10 92 b0 08 	sts	0x08B0, r1
     bee:	10 92 af 08 	sts	0x08AF, r1
	y_12bit = 0;
     bf2:	10 92 a9 04 	sts	0x04A9, r1
     bf6:	10 92 a8 04 	sts	0x04A8, r1
     bfa:	ff 24       	eor	r15, r15
	
	for(i = 0; i < 16; i++)                                     // read X, Y value by 16 times if -PENIRQ enable
    { if((PIND & TOUCH_PIN) == 0x00)                  // -PENIRQ = 0 ?
     bfc:	84 99       	sbic	0x10, 4	; 16
     bfe:	39 c0       	rjmp	.+114    	; 0xc72 <Read_ADS7846_touch+0x8e>
	x_12bit += input_ads7846(ADS7846_CMD_X);// if yes, measure X position
     c00:	00 91 af 08 	lds	r16, 0x08AF
     c04:	10 91 b0 08 	lds	r17, 0x08B0
     c08:	80 ed       	ldi	r24, 0xD0	; 208
     c0a:	0e 94 d1 05 	call	0xba2	; 0xba2 <input_ads7846>
     c0e:	08 0f       	add	r16, r24
     c10:	19 1f       	adc	r17, r25
     c12:	10 93 b0 08 	sts	0x08B0, r17
     c16:	00 93 af 08 	sts	0x08AF, r16

unsigned char delay_us(int v)
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
     c1a:	82 b7       	in	r24, 0x32	; 50
     c1c:	20 ea       	ldi	r18, 0xA0	; 160
     c1e:	30 e0       	ldi	r19, 0x00	; 0
	delay = 16 * v;
	while(delay > 0)
	{
		next = TCNT0;
     c20:	92 b7       	in	r25, 0x32	; 50
		delay -= (next - cur) & 0xff;
     c22:	49 2f       	mov	r20, r25
     c24:	48 1b       	sub	r20, r24
     c26:	24 1b       	sub	r18, r20
     c28:	31 09       	sbc	r19, r1
     c2a:	89 2f       	mov	r24, r25
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
	delay = 16 * v;
	while(delay > 0)
     c2c:	12 16       	cp	r1, r18
     c2e:	13 06       	cpc	r1, r19
     c30:	bc f3       	brlt	.-18     	; 0xc20 <Read_ADS7846_touch+0x3c>
	y_12bit = 0;
	break;
	}
	delay_us(10);
	
	if((PIND & TOUCH_PIN) == 0x00)                   // -PENIRQ = 0 ?
     c32:	84 99       	sbic	0x10, 4	; 16
     c34:	1e c0       	rjmp	.+60     	; 0xc72 <Read_ADS7846_touch+0x8e>
        y_12bit += input_ads7846(ADS7846_CMD_Y);// if yes, measure Y position
     c36:	00 91 a8 04 	lds	r16, 0x04A8
     c3a:	10 91 a9 04 	lds	r17, 0x04A9
     c3e:	80 e9       	ldi	r24, 0x90	; 144
     c40:	0e 94 d1 05 	call	0xba2	; 0xba2 <input_ads7846>
     c44:	08 0f       	add	r16, r24
     c46:	19 1f       	adc	r17, r25
     c48:	10 93 a9 04 	sts	0x04A9, r17
     c4c:	00 93 a8 04 	sts	0x04A8, r16

unsigned char delay_us(int v)
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
     c50:	82 b7       	in	r24, 0x32	; 50
     c52:	20 ea       	ldi	r18, 0xA0	; 160
     c54:	30 e0       	ldi	r19, 0x00	; 0
	delay = 16 * v;
	while(delay > 0)
	{
		next = TCNT0;
     c56:	92 b7       	in	r25, 0x32	; 50
		delay -= (next - cur) & 0xff;
     c58:	49 2f       	mov	r20, r25
     c5a:	48 1b       	sub	r20, r24
     c5c:	24 1b       	sub	r18, r20
     c5e:	31 09       	sbc	r19, r1
     c60:	89 2f       	mov	r24, r25
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
	delay = 16 * v;
	while(delay > 0)
     c62:	12 16       	cp	r1, r18
     c64:	13 06       	cpc	r1, r19
     c66:	bc f3       	brlt	.-18     	; 0xc56 <Read_ADS7846_touch+0x72>
	unsigned char i;
	
	x_12bit = 0;                                                 // initial value
	y_12bit = 0;
	
	for(i = 0; i < 16; i++)                                     // read X, Y value by 16 times if -PENIRQ enable
     c68:	f3 94       	inc	r15
     c6a:	80 e1       	ldi	r24, 0x10	; 16
     c6c:	f8 16       	cp	r15, r24
     c6e:	31 f6       	brne	.-116    	; 0xbfc <Read_ADS7846_touch+0x18>
     c70:	08 c0       	rjmp	.+16     	; 0xc82 <Read_ADS7846_touch+0x9e>
	delay_us(10);
	
	if((PIND & TOUCH_PIN) == 0x00)                   // -PENIRQ = 0 ?
        y_12bit += input_ads7846(ADS7846_CMD_Y);// if yes, measure Y position
	else                                                      // if not, return with 0
	{ x_12bit = 0;
     c72:	10 92 b0 08 	sts	0x08B0, r1
     c76:	10 92 af 08 	sts	0x08AF, r1
	y_12bit = 0;
     c7a:	10 92 a9 04 	sts	0x04A9, r1
     c7e:	10 92 a8 04 	sts	0x04A8, r1
	break;
	}
	delay_us(10);
    }
	
	x_12bit >>= 4;                                             // calculate average for 16 times
     c82:	80 91 af 08 	lds	r24, 0x08AF
     c86:	90 91 b0 08 	lds	r25, 0x08B0
     c8a:	34 e0       	ldi	r19, 0x04	; 4
     c8c:	96 95       	lsr	r25
     c8e:	87 95       	ror	r24
     c90:	3a 95       	dec	r19
     c92:	e1 f7       	brne	.-8      	; 0xc8c <Read_ADS7846_touch+0xa8>
     c94:	90 93 b0 08 	sts	0x08B0, r25
     c98:	80 93 af 08 	sts	0x08AF, r24
	y_12bit >>= 4;
     c9c:	80 91 a8 04 	lds	r24, 0x04A8
     ca0:	90 91 a9 04 	lds	r25, 0x04A9
     ca4:	24 e0       	ldi	r18, 0x04	; 4
     ca6:	96 95       	lsr	r25
     ca8:	87 95       	ror	r24
     caa:	2a 95       	dec	r18
     cac:	e1 f7       	brne	.-8      	; 0xca6 <Read_ADS7846_touch+0xc2>
     cae:	90 93 a9 04 	sts	0x04A9, r25
     cb2:	80 93 a8 04 	sts	0x04A8, r24
	else if(y_12bit >= y_touch_max)
		y_touch = 0;
	else
		y_touch = 319 - (unsigned int)((float)(y_12bit - y_touch_min) * 319./(float)(y_touch_max - y_touch_min));
#endif
}
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	ff 90       	pop	r15
     cbc:	08 95       	ret

00000cbe <pin_set>:
		}
	}
}

void pin_set(int ac, char *av[])
{
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	8b 01       	movw	r16, r22
    DDRB = (LCD_nRD | LCD_nWR | LCD_RS | LCD_nCS);
     cc8:	20 ef       	ldi	r18, 0xF0	; 240
     cca:	27 bb       	out	0x17, r18	; 23
	DDRD = (LCD_RESET | LCD_LED);
     ccc:	20 e6       	ldi	r18, 0x60	; 96
     cce:	21 bb       	out	0x11, r18	; 17
    if(ac == 3)
     cd0:	03 97       	sbiw	r24, 0x03	; 3
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <pin_set+0x18>
     cd4:	62 c0       	rjmp	.+196    	; 0xd9a <pin_set+0xdc>
	{
		if(!strcmp(av[1],"reset"))
     cd6:	fb 01       	movw	r30, r22
     cd8:	c2 81       	ldd	r28, Z+2	; 0x02
     cda:	d3 81       	ldd	r29, Z+3	; 0x03
     cdc:	ce 01       	movw	r24, r28
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	71 e0       	ldi	r23, 0x01	; 1
     ce2:	0e 94 35 09 	call	0x126a	; 0x126a <strcmp>
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	61 f4       	brne	.+24     	; 0xd02 <pin_set+0x44>
		{
			if(!strcmp(av[2],"on"))
     cea:	f8 01       	movw	r30, r16
     cec:	84 81       	ldd	r24, Z+4	; 0x04
     cee:	95 81       	ldd	r25, Z+5	; 0x05
     cf0:	66 e0       	ldi	r22, 0x06	; 6
     cf2:	71 e0       	ldi	r23, 0x01	; 1
     cf4:	0e 94 35 09 	call	0x126a	; 0x126a <strcmp>
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	11 f4       	brne	.+4      	; 0xd00 <pin_set+0x42>
			{
				PORTD |= LCD_RESET;
     cfc:	95 9a       	sbi	0x12, 5	; 18
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <pin_set+0x44>
			}
			else
			{
				PORTD &= ~LCD_RESET;
     d00:	95 98       	cbi	0x12, 5	; 18
			}
		}
		if(!strcmp(av[1],"rd"))
     d02:	ce 01       	movw	r24, r28
     d04:	69 e0       	ldi	r22, 0x09	; 9
     d06:	71 e0       	ldi	r23, 0x01	; 1
     d08:	0e 94 35 09 	call	0x126a	; 0x126a <strcmp>
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	61 f4       	brne	.+24     	; 0xd28 <pin_set+0x6a>
		{
			if(!strcmp(av[2],"on"))
     d10:	f8 01       	movw	r30, r16
     d12:	84 81       	ldd	r24, Z+4	; 0x04
     d14:	95 81       	ldd	r25, Z+5	; 0x05
     d16:	66 e0       	ldi	r22, 0x06	; 6
     d18:	71 e0       	ldi	r23, 0x01	; 1
     d1a:	0e 94 35 09 	call	0x126a	; 0x126a <strcmp>
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	11 f4       	brne	.+4      	; 0xd26 <pin_set+0x68>
			{
				PORTB |= LCD_nRD;
     d22:	c4 9a       	sbi	0x18, 4	; 24
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <pin_set+0x6a>
			}
			else
			{
				PORTB &= ~LCD_nRD;
     d26:	c4 98       	cbi	0x18, 4	; 24
			}
		}
		if(!strcmp(av[1],"wr"))
     d28:	ce 01       	movw	r24, r28
     d2a:	6c e0       	ldi	r22, 0x0C	; 12
     d2c:	71 e0       	ldi	r23, 0x01	; 1
     d2e:	0e 94 35 09 	call	0x126a	; 0x126a <strcmp>
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	61 f4       	brne	.+24     	; 0xd4e <pin_set+0x90>
		{
			if(!strcmp(av[2],"on"))
     d36:	f8 01       	movw	r30, r16
     d38:	84 81       	ldd	r24, Z+4	; 0x04
     d3a:	95 81       	ldd	r25, Z+5	; 0x05
     d3c:	66 e0       	ldi	r22, 0x06	; 6
     d3e:	71 e0       	ldi	r23, 0x01	; 1
     d40:	0e 94 35 09 	call	0x126a	; 0x126a <strcmp>
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	11 f4       	brne	.+4      	; 0xd4c <pin_set+0x8e>
			{
				PORTB |= LCD_nWR;
     d48:	c5 9a       	sbi	0x18, 5	; 24
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <pin_set+0x90>
			}
			else
			{
				PORTB &= ~LCD_nWR;
     d4c:	c5 98       	cbi	0x18, 5	; 24
			}
		}
		if(!strcmp(av[1],"rs"))
     d4e:	ce 01       	movw	r24, r28
     d50:	6f e0       	ldi	r22, 0x0F	; 15
     d52:	71 e0       	ldi	r23, 0x01	; 1
     d54:	0e 94 35 09 	call	0x126a	; 0x126a <strcmp>
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	61 f4       	brne	.+24     	; 0xd74 <pin_set+0xb6>
		{
			if(!strcmp(av[2],"on"))
     d5c:	f8 01       	movw	r30, r16
     d5e:	84 81       	ldd	r24, Z+4	; 0x04
     d60:	95 81       	ldd	r25, Z+5	; 0x05
     d62:	66 e0       	ldi	r22, 0x06	; 6
     d64:	71 e0       	ldi	r23, 0x01	; 1
     d66:	0e 94 35 09 	call	0x126a	; 0x126a <strcmp>
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	11 f4       	brne	.+4      	; 0xd72 <pin_set+0xb4>
			{
				PORTB |= LCD_RS;
     d6e:	c6 9a       	sbi	0x18, 6	; 24
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <pin_set+0xb6>
			}
			else
			{
				PORTB &= ~LCD_RS;
     d72:	c6 98       	cbi	0x18, 6	; 24
			}
		}
		if(!strcmp(av[1],"cs"))
     d74:	ce 01       	movw	r24, r28
     d76:	62 e1       	ldi	r22, 0x12	; 18
     d78:	71 e0       	ldi	r23, 0x01	; 1
     d7a:	0e 94 35 09 	call	0x126a	; 0x126a <strcmp>
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	61 f4       	brne	.+24     	; 0xd9a <pin_set+0xdc>
		{
			if(!strcmp(av[2],"on"))
     d82:	f8 01       	movw	r30, r16
     d84:	84 81       	ldd	r24, Z+4	; 0x04
     d86:	95 81       	ldd	r25, Z+5	; 0x05
     d88:	66 e0       	ldi	r22, 0x06	; 6
     d8a:	71 e0       	ldi	r23, 0x01	; 1
     d8c:	0e 94 35 09 	call	0x126a	; 0x126a <strcmp>
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	11 f4       	brne	.+4      	; 0xd98 <pin_set+0xda>
			{
				PORTB |= LCD_nCS;
     d94:	c7 9a       	sbi	0x18, 7	; 24
     d96:	01 c0       	rjmp	.+2      	; 0xd9a <pin_set+0xdc>
			}
			else
			{
				PORTB &= ~LCD_nCS;
     d98:	c7 98       	cbi	0x18, 7	; 24
			}
		}
	}
}
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	08 95       	ret

00000da4 <backlight>:
#define BUS_INPUT()   do {DDRC = 0; DDRA = 0; } while(0)
#define BUS_OUTPUT()   do {DDRC = 0xff; DDRA = 0xff; } while(0)


void backlight(int ac, char *av[])
{
     da4:	fb 01       	movw	r30, r22
    DDRD = LCD_LED;
     da6:	20 e4       	ldi	r18, 0x40	; 64
     da8:	21 bb       	out	0x11, r18	; 17
    if(ac == 2)
     daa:	02 97       	sbiw	r24, 0x02	; 2
     dac:	59 f4       	brne	.+22     	; 0xdc4 <backlight+0x20>
	{
		if(!strcmp(av[1],"on"))
     dae:	82 81       	ldd	r24, Z+2	; 0x02
     db0:	93 81       	ldd	r25, Z+3	; 0x03
     db2:	66 e0       	ldi	r22, 0x06	; 6
     db4:	71 e0       	ldi	r23, 0x01	; 1
     db6:	0e 94 35 09 	call	0x126a	; 0x126a <strcmp>
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	11 f4       	brne	.+4      	; 0xdc2 <backlight+0x1e>
		{
			PORTD &= ~LCD_LED;
     dbe:	96 98       	cbi	0x12, 6	; 18
     dc0:	08 95       	ret
		}
		else
		{
			PORTD |= LCD_LED;
     dc2:	96 9a       	sbi	0x12, 6	; 18
     dc4:	08 95       	ret

00000dc6 <button_test>:

//--------------------------------------------------------------


void button_test(int ac, char *av[])
{
     dc6:	1f 93       	push	r17
			c = rx_char0();
			if(c == 'q') break;
		}
		if((button0_state == 0) && !(PINE & (1 << 4)))
		{
			button0_state = 1;
     dc8:	11 e0       	ldi	r17, 0x01	; 1
    static UINT8 button0_state = 0;
	static UINT8 button1_state = 0;
	UINT8 c;
	while(1)
	{
		if(UCSR0A & (1 << RXC)) {
     dca:	5f 9b       	sbis	0x0b, 7	; 11
     dcc:	05 c0       	rjmp	.+10     	; 0xdd8 <button_test+0x12>
/*
* Function tx_char without interrupt mode 
*/
UINT8 rx_char0(void)
{
	while(!(UCSR0A & _BV(RXC0)));
     dce:	5f 9b       	sbis	0x0b, 7	; 11
     dd0:	fe cf       	rjmp	.-4      	; 0xdce <button_test+0x8>
	return UDR0;
     dd2:	8c b1       	in	r24, 0x0c	; 12
	UINT8 c;
	while(1)
	{
		if(UCSR0A & (1 << RXC)) {
			c = rx_char0();
			if(c == 'q') break;
     dd4:	81 37       	cpi	r24, 0x71	; 113
     dd6:	49 f1       	breq	.+82     	; 0xe2a <button_test+0x64>
		}
		if((button0_state == 0) && !(PINE & (1 << 4)))
     dd8:	80 91 3f 03 	lds	r24, 0x033F
     ddc:	88 23       	and	r24, r24
     dde:	41 f4       	brne	.+16     	; 0xdf0 <button_test+0x2a>
     de0:	0c 99       	sbic	0x01, 4	; 1
     de2:	06 c0       	rjmp	.+12     	; 0xdf0 <button_test+0x2a>
		{
			button0_state = 1;
     de4:	10 93 3f 03 	sts	0x033F, r17
			printf("B0 pushed\n");
     de8:	85 e1       	ldi	r24, 0x15	; 21
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	0e 94 57 09 	call	0x12ae	; 0x12ae <puts>
		}
		if((button1_state == 0) && !(PINE & (1 << 5)))
     df0:	80 91 3e 03 	lds	r24, 0x033E
     df4:	88 23       	and	r24, r24
     df6:	41 f4       	brne	.+16     	; 0xe08 <button_test+0x42>
     df8:	0d 99       	sbic	0x01, 5	; 1
     dfa:	06 c0       	rjmp	.+12     	; 0xe08 <button_test+0x42>
		{
			button1_state = 1;
     dfc:	10 93 3e 03 	sts	0x033E, r17
			printf("B1 pushed\n");
     e00:	8f e1       	ldi	r24, 0x1F	; 31
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	0e 94 57 09 	call	0x12ae	; 0x12ae <puts>
		}
		if((button0_state == 1) && (PINE & (1 << 4)))
     e08:	80 91 3f 03 	lds	r24, 0x033F
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	21 f4       	brne	.+8      	; 0xe18 <button_test+0x52>
     e10:	0c 9b       	sbis	0x01, 4	; 1
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <button_test+0x52>
		{
			button0_state = 0;
     e14:	10 92 3f 03 	sts	0x033F, r1
		}
		if((button1_state == 1) && (PINE & (1 << 5)))
     e18:	80 91 3e 03 	lds	r24, 0x033E
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	a9 f6       	brne	.-86     	; 0xdca <button_test+0x4>
     e20:	0d 9b       	sbis	0x01, 5	; 1
     e22:	d3 cf       	rjmp	.-90     	; 0xdca <button_test+0x4>
		{
			button1_state = 0;
     e24:	10 92 3e 03 	sts	0x033E, r1
     e28:	d0 cf       	rjmp	.-96     	; 0xdca <button_test+0x4>
		}
		
	}
}
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <fnd_test>:
    for(j = 0 ; j < delay ; j ++)
		for( i = 0 ; i < 0xffff ; i ++);
		
}
void fnd_test(int ac, char *av[])
{
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
    UINT8 i,digits;
    DDRC = 0xff;
     e36:	8f ef       	ldi	r24, 0xFF	; 255
     e38:	84 bb       	out	0x14, r24	; 20
	DDRG = 0xf;
     e3a:	8f e0       	ldi	r24, 0x0F	; 15
     e3c:	80 93 64 00 	sts	0x0064, r24
     e40:	00 e0       	ldi	r16, 0x00	; 0
     e42:	10 e0       	ldi	r17, 0x00	; 0
	{
		if((UCSR0A & (1 << RXC))) {
			if(UDR0 == 'q') 
				break;
		}
		PORTG = 1 << digits;
     e44:	c1 e0       	ldi	r28, 0x01	; 1
     e46:	d0 e0       	ldi	r29, 0x00	; 0
    DDRC = 0xff;
	DDRG = 0xf;
	digits = 0;
	for( i = 0 ; i < 10 ; i ++)
	{
		if((UCSR0A & (1 << RXC))) {
     e48:	5f 9b       	sbis	0x0b, 7	; 11
     e4a:	03 c0       	rjmp	.+6      	; 0xe52 <fnd_test+0x24>
			if(UDR0 == 'q') 
     e4c:	8c b1       	in	r24, 0x0c	; 12
     e4e:	81 37       	cpi	r24, 0x71	; 113
     e50:	f1 f0       	breq	.+60     	; 0xe8e <fnd_test+0x60>
				break;
		}
		PORTG = 1 << digits;
     e52:	ce 01       	movw	r24, r28
     e54:	01 2e       	mov	r0, r17
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <fnd_test+0x2e>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <fnd_test+0x2a>
     e60:	80 93 65 00 	sts	0x0065, r24
		PORTC = v_to_seg[i%10];
     e64:	80 2f       	mov	r24, r16
     e66:	6a e0       	ldi	r22, 0x0A	; 10
     e68:	0e 94 29 09 	call	0x1252	; 0x1252 <__udivmodqi4>
     e6c:	e9 2f       	mov	r30, r25
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	ef 5c       	subi	r30, 0xCF	; 207
     e72:	fc 4f       	sbci	r31, 0xFC	; 252
     e74:	80 81       	ld	r24, Z
     e76:	85 bb       	out	0x15, r24	; 21
		my_delay(10);
     e78:	8a e0       	ldi	r24, 0x0A	; 10
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 b8 01 	call	0x370	; 0x370 <my_delay>
		digits++;
     e80:	1f 5f       	subi	r17, 0xFF	; 255
		if(digits >= 4) digits = 0;
     e82:	14 30       	cpi	r17, 0x04	; 4
     e84:	08 f0       	brcs	.+2      	; 0xe88 <fnd_test+0x5a>
     e86:	10 e0       	ldi	r17, 0x00	; 0
{
    UINT8 i,digits;
    DDRC = 0xff;
	DDRG = 0xf;
	digits = 0;
	for( i = 0 ; i < 10 ; i ++)
     e88:	0f 5f       	subi	r16, 0xFF	; 255
     e8a:	0a 30       	cpi	r16, 0x0A	; 10
     e8c:	e9 f6       	brne	.-70     	; 0xe48 <fnd_test+0x1a>
		PORTC = v_to_seg[i%10];
		my_delay(10);
		digits++;
		if(digits >= 4) digits = 0;
	}
	printf("end of fnd test\n");
     e8e:	89 e2       	ldi	r24, 0x29	; 41
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	0e 94 57 09 	call	0x12ae	; 0x12ae <puts>
}
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	08 95       	ret

00000ea0 <read_light>:
* Per ADC channel conv time   =  6.500000 uS
*--------------------------------------------------------------
*/
void init_adc(void)
{
	ADMUX = ADC_AREF;
     ea0:	17 b8       	out	0x07, r1	; 7
	ADCSRA = ADC_EN | ADC_CLK_DIV_4;
     ea2:	82 e8       	ldi	r24, 0x82	; 130
     ea4:	86 b9       	out	0x06, r24	; 6
}

void read_light(int ac, char *av[])
{
    init_adc();
	printf("Light ADC = %d\n",get_adc_value(0));
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	0e 94 83 02 	call	0x506	; 0x506 <get_adc_value>
     eac:	00 d0       	rcall	.+0      	; 0xeae <read_light+0xe>
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <read_light+0x10>
     eb0:	29 e3       	ldi	r18, 0x39	; 57
     eb2:	31 e0       	ldi	r19, 0x01	; 1
     eb4:	ed b7       	in	r30, 0x3d	; 61
     eb6:	fe b7       	in	r31, 0x3e	; 62
     eb8:	32 83       	std	Z+2, r19	; 0x02
     eba:	21 83       	std	Z+1, r18	; 0x01
     ebc:	94 83       	std	Z+4, r25	; 0x04
     ebe:	83 83       	std	Z+3, r24	; 0x03
     ec0:	0e 94 45 09 	call	0x128a	; 0x128a <printf>
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
}
     ecc:	08 95       	ret

00000ece <read_temp_cmd>:

void read_temp_cmd(int ac, char *av[])
{
    int temp;
	
	init_i2c();
     ece:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <init_i2c>
	temp = read_temp();
     ed2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <read_temp>
     ed6:	9c 01       	movw	r18, r24
	
    printf("TEMP = %d.%d\n\r",temp>>1,(temp & 1) ? 5 : 0);
     ed8:	80 fd       	sbrc	r24, 0
     eda:	03 c0       	rjmp	.+6      	; 0xee2 <read_temp_cmd+0x14>
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <read_temp_cmd+0x18>
     ee2:	45 e0       	ldi	r20, 0x05	; 5
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <read_temp_cmd+0x1a>
     ee8:	00 d0       	rcall	.+0      	; 0xeea <read_temp_cmd+0x1c>
     eea:	00 d0       	rcall	.+0      	; 0xeec <read_temp_cmd+0x1e>
     eec:	ed b7       	in	r30, 0x3d	; 61
     eee:	fe b7       	in	r31, 0x3e	; 62
     ef0:	31 96       	adiw	r30, 0x01	; 1
     ef2:	89 e4       	ldi	r24, 0x49	; 73
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	ad b7       	in	r26, 0x3d	; 61
     ef8:	be b7       	in	r27, 0x3e	; 62
     efa:	12 96       	adiw	r26, 0x02	; 2
     efc:	9c 93       	st	X, r25
     efe:	8e 93       	st	-X, r24
     f00:	11 97       	sbiw	r26, 0x01	; 1
     f02:	35 95       	asr	r19
     f04:	27 95       	ror	r18
     f06:	33 83       	std	Z+3, r19	; 0x03
     f08:	22 83       	std	Z+2, r18	; 0x02
     f0a:	55 83       	std	Z+5, r21	; 0x05
     f0c:	44 83       	std	Z+4, r20	; 0x04
     f0e:	0e 94 45 09 	call	0x128a	; 0x128a <printf>
     f12:	8d b7       	in	r24, 0x3d	; 61
     f14:	9e b7       	in	r25, 0x3e	; 62
     f16:	06 96       	adiw	r24, 0x06	; 6
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	9e bf       	out	0x3e, r25	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	8d bf       	out	0x3d, r24	; 61
	
}
     f22:	08 95       	ret

00000f24 <ms>:
		printf("LCD rd addr = %x data = %x\n",addr,data);
	}
}

void ms(int ac, char *av[])
{
     f24:	ef 92       	push	r14
     f26:	ff 92       	push	r15
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	eb 01       	movw	r28, r22
    unsigned int addr;
	unsigned int data;
    if(ac == 3)
     f32:	03 97       	sbiw	r24, 0x03	; 3
     f34:	71 f5       	brne	.+92     	; 0xf92 <ms+0x6e>
	{
		addr = h_atoi(av[1]);
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	9b 81       	ldd	r25, Y+3	; 0x03
     f3a:	0e 94 81 03 	call	0x702	; 0x702 <h_atoi>
     f3e:	f8 2e       	mov	r15, r24
     f40:	e9 2e       	mov	r14, r25
		data = h_atoi(av[2]);
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	9d 81       	ldd	r25, Y+5	; 0x05
     f46:	0e 94 81 03 	call	0x702	; 0x702 <h_atoi>
     f4a:	18 2f       	mov	r17, r24
     f4c:	09 2f       	mov	r16, r25
		LCD_write_reg(addr,data);
     f4e:	8f 2d       	mov	r24, r15
     f50:	9e 2d       	mov	r25, r14
     f52:	61 2f       	mov	r22, r17
     f54:	70 2f       	mov	r23, r16
     f56:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_write_reg>
		printf("LCD wr addr = %x data = %x\n",addr,data);
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <ms+0x38>
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <ms+0x3a>
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <ms+0x3c>
     f60:	ed b7       	in	r30, 0x3d	; 61
     f62:	fe b7       	in	r31, 0x3e	; 62
     f64:	31 96       	adiw	r30, 0x01	; 1
     f66:	88 e5       	ldi	r24, 0x58	; 88
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	ad b7       	in	r26, 0x3d	; 61
     f6c:	be b7       	in	r27, 0x3e	; 62
     f6e:	12 96       	adiw	r26, 0x02	; 2
     f70:	9c 93       	st	X, r25
     f72:	8e 93       	st	-X, r24
     f74:	11 97       	sbiw	r26, 0x01	; 1
     f76:	f2 82       	std	Z+2, r15	; 0x02
     f78:	e3 82       	std	Z+3, r14	; 0x03
     f7a:	14 83       	std	Z+4, r17	; 0x04
     f7c:	05 83       	std	Z+5, r16	; 0x05
     f7e:	0e 94 45 09 	call	0x128a	; 0x128a <printf>
     f82:	8d b7       	in	r24, 0x3d	; 61
     f84:	9e b7       	in	r25, 0x3e	; 62
     f86:	06 96       	adiw	r24, 0x06	; 6
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	9e bf       	out	0x3e, r25	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	8d bf       	out	0x3d, r24	; 61
	}
}
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	ff 90       	pop	r15
     f9c:	ef 90       	pop	r14
     f9e:	08 95       	ret

00000fa0 <md>:

void LCD_write_reg(unsigned int addr, unsigned int v);
unsigned char LCD_read_reg(unsigned int addr);

void md(int ac, char *av[])
{
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	fb 01       	movw	r30, r22
    unsigned int addr;
	unsigned char data;
    if(ac == 2)
     fa6:	02 97       	sbiw	r24, 0x02	; 2
     fa8:	21 f5       	brne	.+72     	; 0xff2 <md+0x52>
	{
		addr = h_atoi(av[1]);
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	0e 94 81 03 	call	0x702	; 0x702 <h_atoi>
     fb2:	18 2f       	mov	r17, r24
     fb4:	09 2f       	mov	r16, r25
		data = LCD_read_reg(addr);
     fb6:	0e 94 c8 03 	call	0x790	; 0x790 <LCD_read_reg>
		printf("LCD rd addr = %x data = %x\n",addr,data);
     fba:	00 d0       	rcall	.+0      	; 0xfbc <md+0x1c>
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <md+0x1e>
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <md+0x20>
     fc0:	ed b7       	in	r30, 0x3d	; 61
     fc2:	fe b7       	in	r31, 0x3e	; 62
     fc4:	31 96       	adiw	r30, 0x01	; 1
     fc6:	24 e7       	ldi	r18, 0x74	; 116
     fc8:	31 e0       	ldi	r19, 0x01	; 1
     fca:	ad b7       	in	r26, 0x3d	; 61
     fcc:	be b7       	in	r27, 0x3e	; 62
     fce:	12 96       	adiw	r26, 0x02	; 2
     fd0:	3c 93       	st	X, r19
     fd2:	2e 93       	st	-X, r18
     fd4:	11 97       	sbiw	r26, 0x01	; 1
     fd6:	12 83       	std	Z+2, r17	; 0x02
     fd8:	03 83       	std	Z+3, r16	; 0x03
     fda:	84 83       	std	Z+4, r24	; 0x04
     fdc:	15 82       	std	Z+5, r1	; 0x05
     fde:	0e 94 45 09 	call	0x128a	; 0x128a <printf>
     fe2:	8d b7       	in	r24, 0x3d	; 61
     fe4:	9e b7       	in	r25, 0x3e	; 62
     fe6:	06 96       	adiw	r24, 0x06	; 6
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	9e bf       	out	0x3e, r25	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	8d bf       	out	0x3d, r24	; 61
	}
}
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	08 95       	ret

00000ff8 <help>:
	//{"motor",motor_test,"MOTOR test"},
	{NULL,  NULL,NULL}
};

void help()
{
     ff8:	ef 92       	push	r14
     ffa:	ff 92       	push	r15
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
	int i,j;
	printf("--------------< Supported Commands >------------------\n");
    1004:	80 e9       	ldi	r24, 0x90	; 144
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	0e 94 57 09 	call	0x12ae	; 0x12ae <puts>
	printf("  CMD            Description\n");
    100c:	87 ec       	ldi	r24, 0xC7	; 199
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	0e 94 57 09 	call	0x12ae	; 0x12ae <puts>
	printf("------------------------------------------------------\n");
    1014:	84 ee       	ldi	r24, 0xE4	; 228
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	0e 94 57 09 	call	0x12ae	; 0x12ae <puts>
    101c:	01 e0       	ldi	r16, 0x01	; 1
    101e:	13 e0       	ldi	r17, 0x03	; 3
	for(i=0;;i++)
	{
		if(cmd_tbl[i].cmd == NULL) break;
		JC_putchar(' ');
		JC_putString(cmd_tbl[i].cmd);
		for( j = 0 ; j < 10 - strlen(cmd_tbl[i].cmd) ; j ++) JC_putchar(' ');
    1020:	7a e0       	ldi	r23, 0x0A	; 10
    1022:	e7 2e       	mov	r14, r23
    1024:	f1 2c       	mov	r15, r1
	printf("--------------< Supported Commands >------------------\n");
	printf("  CMD            Description\n");
	printf("------------------------------------------------------\n");
	for(i=0;;i++)
	{
		if(cmd_tbl[i].cmd == NULL) break;
    1026:	d8 01       	movw	r26, r16
    1028:	8d 91       	ld	r24, X+
    102a:	9c 91       	ld	r25, X
    102c:	89 2b       	or	r24, r25
    102e:	c1 f1       	breq	.+112    	; 0x10a0 <help+0xa8>
		JC_putchar(' ');
    1030:	80 e2       	ldi	r24, 0x20	; 32
    1032:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
		JC_putString(cmd_tbl[i].cmd);
    1036:	f8 01       	movw	r30, r16
    1038:	c0 81       	ld	r28, Z
    103a:	d1 81       	ldd	r29, Z+1	; 0x01
    103c:	03 c0       	rjmp	.+6      	; 0x1044 <help+0x4c>
	JC_putchar(c);
}

static void JC_putString(char *s)
{
	while(*s) JC_putChar(*s++);
    103e:	21 96       	adiw	r28, 0x01	; 1
	return c;		
}

static int JC_putChar(char c)
{
	JC_putchar(c);
    1040:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
}

static void JC_putString(char *s)
{
	while(*s) JC_putChar(*s++);
    1044:	88 81       	ld	r24, Y
    1046:	88 23       	and	r24, r24
    1048:	d1 f7       	brne	.-12     	; 0x103e <help+0x46>
    104a:	c0 e0       	ldi	r28, 0x00	; 0
    104c:	d0 e0       	ldi	r29, 0x00	; 0
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <help+0x60>
	for(i=0;;i++)
	{
		if(cmd_tbl[i].cmd == NULL) break;
		JC_putchar(' ');
		JC_putString(cmd_tbl[i].cmd);
		for( j = 0 ; j < 10 - strlen(cmd_tbl[i].cmd) ; j ++) JC_putchar(' ');
    1050:	80 e2       	ldi	r24, 0x20	; 32
    1052:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
    1056:	21 96       	adiw	r28, 0x01	; 1
    1058:	d8 01       	movw	r26, r16
    105a:	ec 91       	ld	r30, X
    105c:	11 96       	adiw	r26, 0x01	; 1
    105e:	fc 91       	ld	r31, X
    1060:	df 01       	movw	r26, r30
    1062:	0d 90       	ld	r0, X+
    1064:	00 20       	and	r0, r0
    1066:	e9 f7       	brne	.-6      	; 0x1062 <help+0x6a>
    1068:	11 97       	sbiw	r26, 0x01	; 1
    106a:	ae 1b       	sub	r26, r30
    106c:	bf 0b       	sbc	r27, r31
    106e:	c7 01       	movw	r24, r14
    1070:	8a 1b       	sub	r24, r26
    1072:	9b 0b       	sbc	r25, r27
    1074:	c8 17       	cp	r28, r24
    1076:	d9 07       	cpc	r29, r25
    1078:	58 f3       	brcs	.-42     	; 0x1050 <help+0x58>
		JC_putString(cmd_tbl[i].usage);JC_putchar('\n');JC_putchar('\r');
    107a:	f8 01       	movw	r30, r16
    107c:	c4 81       	ldd	r28, Z+4	; 0x04
    107e:	d5 81       	ldd	r29, Z+5	; 0x05
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <help+0x90>
	JC_putchar(c);
}

static void JC_putString(char *s)
{
	while(*s) JC_putChar(*s++);
    1082:	21 96       	adiw	r28, 0x01	; 1
	return c;		
}

static int JC_putChar(char c)
{
	JC_putchar(c);
    1084:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
}

static void JC_putString(char *s)
{
	while(*s) JC_putChar(*s++);
    1088:	88 81       	ld	r24, Y
    108a:	88 23       	and	r24, r24
    108c:	d1 f7       	brne	.-12     	; 0x1082 <help+0x8a>
	{
		if(cmd_tbl[i].cmd == NULL) break;
		JC_putchar(' ');
		JC_putString(cmd_tbl[i].cmd);
		for( j = 0 ; j < 10 - strlen(cmd_tbl[i].cmd) ; j ++) JC_putchar(' ');
		JC_putString(cmd_tbl[i].usage);JC_putchar('\n');JC_putchar('\r');
    108e:	8a e0       	ldi	r24, 0x0A	; 10
    1090:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
    1094:	8d e0       	ldi	r24, 0x0D	; 13
    1096:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
    109a:	0a 5f       	subi	r16, 0xFA	; 250
    109c:	1f 4f       	sbci	r17, 0xFF	; 255
    109e:	c3 cf       	rjmp	.-122    	; 0x1026 <help+0x2e>
	}
	printf("------------------------------------------------------\n");
    10a0:	84 ee       	ldi	r24, 0xE4	; 228
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	0e 94 57 09 	call	0x12ae	; 0x12ae <puts>
}
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	08 95       	ret

000010b6 <get_args>:
#define MAX_ARGS_LEN 20
#define JC_strcpy	strcpy
#define JC_strcmp	strcmp

int get_args(char *buf, char *av[])
{
    10b6:	af 92       	push	r10
    10b8:	bf 92       	push	r11
    10ba:	cf 92       	push	r12
    10bc:	df 92       	push	r13
    10be:	ef 92       	push	r14
    10c0:	ff 92       	push	r15
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	5c 01       	movw	r10, r24
    10cc:	6b 01       	movw	r12, r22
    10ce:	7c 01       	movw	r14, r24
    10d0:	c0 e0       	ldi	r28, 0x00	; 0
    10d2:	d0 e0       	ldi	r29, 0x00	; 0
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	01 e0       	ldi	r16, 0x01	; 1
    10da:	10 e0       	ldi	r17, 0x00	; 0
    10dc:	05 c0       	rjmp	.+10     	; 0x10e8 <get_args+0x32>
    10de:	08 94       	sec
    10e0:	e1 1c       	adc	r14, r1
    10e2:	f1 1c       	adc	r15, r1
    10e4:	0f 5f       	subi	r16, 0xFF	; 255
    10e6:	1f 4f       	sbci	r17, 0xFF	; 255
    10e8:	98 01       	movw	r18, r16
    10ea:	21 50       	subi	r18, 0x01	; 1
    10ec:	30 40       	sbci	r19, 0x00	; 0
	int	num, start, end;
	start = end = num = 0;
	while (1)
	{
		//printf("start=%d end=%d buf[end]=%x num=%d\n",start,end,buf[end],num);
		if(buf[end] == '\0' || buf[end] == '\n' || buf[end] == '\r')
    10ee:	f7 01       	movw	r30, r14
    10f0:	80 81       	ld	r24, Z
    10f2:	88 23       	and	r24, r24
    10f4:	21 f0       	breq	.+8      	; 0x10fe <get_args+0x48>
    10f6:	8a 30       	cpi	r24, 0x0A	; 10
    10f8:	11 f0       	breq	.+4      	; 0x10fe <get_args+0x48>
    10fa:	8d 30       	cpi	r24, 0x0D	; 13
    10fc:	11 f5       	brne	.+68     	; 0x1142 <__stack+0x43>
    10fe:	fe 01       	movw	r30, r28
    1100:	ee 0f       	add	r30, r30
    1102:	ff 1f       	adc	r31, r31
		{
			if(start != end)
    1104:	62 17       	cp	r22, r18
    1106:	73 07       	cpc	r23, r19
    1108:	61 f0       	breq	.+24     	; 0x1122 <__stack+0x23>
			{
				JC_strcpy(av[num],buf+start);
    110a:	ec 0d       	add	r30, r12
    110c:	fd 1d       	adc	r31, r13
    110e:	6a 0d       	add	r22, r10
    1110:	7b 1d       	adc	r23, r11
    1112:	80 81       	ld	r24, Z
    1114:	91 81       	ldd	r25, Z+1	; 0x01
    1116:	0e 94 3e 09 	call	0x127c	; 0x127c <strcpy>
				num ++;
    111a:	21 96       	adiw	r28, 0x01	; 1
				av[num] = 0;
    111c:	fe 01       	movw	r30, r28
    111e:	ee 0f       	add	r30, r30
    1120:	ff 1f       	adc	r31, r31
				return num;
			}
			else
			{
				av[num] = 0;
    1122:	ec 0d       	add	r30, r12
    1124:	fd 1d       	adc	r31, r13
    1126:	11 82       	std	Z+1, r1	; 0x01
    1128:	10 82       	st	Z, r1
			end ++;
			start = end ;
		}
	}
	return 0;
}
    112a:	ce 01       	movw	r24, r28
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	08 95       	ret
			{
				av[num] = 0;
				return num;
			}
		} 
		if(buf[end] != ' ' && buf[end] != '\t' ) {
    1142:	80 32       	cpi	r24, 0x20	; 32
    1144:	11 f0       	breq	.+4      	; 0x114a <__stack+0x4b>
    1146:	89 30       	cpi	r24, 0x09	; 9
    1148:	51 f6       	brne	.-108    	; 0x10de <get_args+0x28>
			end ++;
		}
		else
		{
			buf[end] = 0;
    114a:	f7 01       	movw	r30, r14
    114c:	10 82       	st	Z, r1
			JC_strcpy(av[num],buf+start);
    114e:	fe 01       	movw	r30, r28
    1150:	ee 0f       	add	r30, r30
    1152:	ff 1f       	adc	r31, r31
    1154:	ec 0d       	add	r30, r12
    1156:	fd 1d       	adc	r31, r13
    1158:	6a 0d       	add	r22, r10
    115a:	7b 1d       	adc	r23, r11
    115c:	80 81       	ld	r24, Z
    115e:	91 81       	ldd	r25, Z+1	; 0x01
    1160:	0e 94 3e 09 	call	0x127c	; 0x127c <strcpy>
			num ++;
    1164:	21 96       	adiw	r28, 0x01	; 1
    1166:	b8 01       	movw	r22, r16
    1168:	ba cf       	rjmp	.-140    	; 0x10de <get_args+0x28>

0000116a <exec_cmd>:
	return my_atoi(s);
}


void exec_cmd()
{
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	e0 e4       	ldi	r30, 0x40	; 64
    1174:	f3 e0       	ldi	r31, 0x03	; 3
    1176:	84 e5       	ldi	r24, 0x54	; 84
    1178:	93 e0       	ldi	r25, 0x03	; 3
	int i,ac;
	for( i = 0 ; i < NUM_ARGS ; i ++) {
		av[i] = &avbuf[i][0];
    117a:	81 93       	st	Z+, r24
    117c:	91 93       	st	Z+, r25
    117e:	45 96       	adiw	r24, 0x15	; 21


void exec_cmd()
{
	int i,ac;
	for( i = 0 ; i < NUM_ARGS ; i ++) {
    1180:	23 e0       	ldi	r18, 0x03	; 3
    1182:	e4 35       	cpi	r30, 0x54	; 84
    1184:	f2 07       	cpc	r31, r18
    1186:	c9 f7       	brne	.-14     	; 0x117a <exec_cmd+0x10>
		av[i] = &avbuf[i][0];
	}
	ac = get_args(Cmd_buf.cmd_buf,av);
    1188:	74 97       	sbiw	r30, 0x14	; 20
    118a:	87 e2       	ldi	r24, 0x27	; 39
    118c:	94 e0       	ldi	r25, 0x04	; 4
    118e:	bf 01       	movw	r22, r30
    1190:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <get_args>
    1194:	8c 01       	movw	r16, r24
    1196:	c1 e0       	ldi	r28, 0x01	; 1
    1198:	d3 e0       	ldi	r29, 0x03	; 3
	
	for( i = 0 ; ; i ++)
	{
		if(cmd_tbl[i].cmd == NULL) break;
    119a:	68 81       	ld	r22, Y
    119c:	79 81       	ldd	r23, Y+1	; 0x01
    119e:	61 15       	cp	r22, r1
    11a0:	71 05       	cpc	r23, r1
    11a2:	81 f0       	breq	.+32     	; 0x11c4 <exec_cmd+0x5a>
		if(!strcmp(av[0],cmd_tbl[i].cmd)) {
    11a4:	80 91 40 03 	lds	r24, 0x0340
    11a8:	90 91 41 03 	lds	r25, 0x0341
    11ac:	0e 94 35 09 	call	0x126a	; 0x126a <strcmp>
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	31 f4       	brne	.+12     	; 0x11c0 <exec_cmd+0x56>
			(*cmd_tbl[i].fn)(ac,av);
    11b4:	ea 81       	ldd	r30, Y+2	; 0x02
    11b6:	fb 81       	ldd	r31, Y+3	; 0x03
    11b8:	c8 01       	movw	r24, r16
    11ba:	60 e4       	ldi	r22, 0x40	; 64
    11bc:	73 e0       	ldi	r23, 0x03	; 3
    11be:	09 95       	icall
    11c0:	26 96       	adiw	r28, 0x06	; 6
    11c2:	eb cf       	rjmp	.-42     	; 0x119a <exec_cmd+0x30>
		}
	}
	
}
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	08 95       	ret

000011ce <main>:
void get_cmd();
void exec_cmd();


int main(void)
{
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
	
	volatile float result;
	
	//SFIOR &= ~PUD;
	stdout = &mystdout;
    11d6:	84 e6       	ldi	r24, 0x64	; 100
    11d8:	92 e0       	ldi	r25, 0x02	; 2
    11da:	90 93 c5 08 	sts	0x08C5, r25
    11de:	80 93 c4 08 	sts	0x08C4, r24
	uart_init(UART_CH0,STOP_BIT1,PARITY_NONE,BAUD_9600,NO,NO);
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	40 e0       	ldi	r20, 0x00	; 0
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	21 e0       	ldi	r18, 0x01	; 1
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	00 e0       	ldi	r16, 0x00	; 0
    11f4:	10 e0       	ldi	r17, 0x00	; 0
    11f6:	ee 24       	eor	r14, r14
    11f8:	ff 24       	eor	r15, r15
    11fa:	0e 94 88 00 	call	0x110	; 0x110 <uart_init>
	//uart_init(UART_CH1,STOP_BIT1,PARITY_NONE,BAUD_250K,NO,NO);
	
	printf("Hello Uart0 works at %d baud \n",9600);
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <main+0x32>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <main+0x34>
    1202:	8b e1       	ldi	r24, 0x1B	; 27
    1204:	92 e0       	ldi	r25, 0x02	; 2
    1206:	ed b7       	in	r30, 0x3d	; 61
    1208:	fe b7       	in	r31, 0x3e	; 62
    120a:	92 83       	std	Z+2, r25	; 0x02
    120c:	81 83       	std	Z+1, r24	; 0x01
    120e:	80 e8       	ldi	r24, 0x80	; 128
    1210:	95 e2       	ldi	r25, 0x25	; 37
    1212:	94 83       	std	Z+4, r25	; 0x04
    1214:	83 83       	std	Z+3, r24	; 0x03
    1216:	0e 94 45 09 	call	0x128a	; 0x128a <printf>
	printf("monitor-128 $ ");
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0a e3       	ldi	r16, 0x3A	; 58
    1220:	12 e0       	ldi	r17, 0x02	; 2
    1222:	ed b7       	in	r30, 0x3d	; 61
    1224:	fe b7       	in	r31, 0x3e	; 62
    1226:	12 83       	std	Z+2, r17	; 0x02
    1228:	01 83       	std	Z+1, r16	; 0x01
    122a:	0e 94 45 09 	call	0x128a	; 0x128a <printf>
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0

	while(1)
	{
		get_cmd();
		exec_cmd();
		printf("monitor-128 $ ");
    1232:	f0 2e       	mov	r15, r16
    1234:	01 2f       	mov	r16, r17
	printf("Hello Uart0 works at %d baud \n",9600);
	printf("monitor-128 $ ");

	while(1)
	{
		get_cmd();
    1236:	0e 94 27 01 	call	0x24e	; 0x24e <get_cmd>
		exec_cmd();
    123a:	0e 94 b5 08 	call	0x116a	; 0x116a <exec_cmd>
		printf("monitor-128 $ ");
    123e:	00 d0       	rcall	.+0      	; 0x1240 <main+0x72>
    1240:	ed b7       	in	r30, 0x3d	; 61
    1242:	fe b7       	in	r31, 0x3e	; 62
    1244:	f1 82       	std	Z+1, r15	; 0x01
    1246:	02 83       	std	Z+2, r16	; 0x02
    1248:	0e 94 45 09 	call	0x128a	; 0x128a <printf>
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	f2 cf       	rjmp	.-28     	; 0x1236 <main+0x68>

00001252 <__udivmodqi4>:
    1252:	99 1b       	sub	r25, r25
    1254:	79 e0       	ldi	r23, 0x09	; 9
    1256:	04 c0       	rjmp	.+8      	; 0x1260 <__udivmodqi4_ep>

00001258 <__udivmodqi4_loop>:
    1258:	99 1f       	adc	r25, r25
    125a:	96 17       	cp	r25, r22
    125c:	08 f0       	brcs	.+2      	; 0x1260 <__udivmodqi4_ep>
    125e:	96 1b       	sub	r25, r22

00001260 <__udivmodqi4_ep>:
    1260:	88 1f       	adc	r24, r24
    1262:	7a 95       	dec	r23
    1264:	c9 f7       	brne	.-14     	; 0x1258 <__udivmodqi4_loop>
    1266:	80 95       	com	r24
    1268:	08 95       	ret

0000126a <strcmp>:
    126a:	fb 01       	movw	r30, r22
    126c:	dc 01       	movw	r26, r24
    126e:	8d 91       	ld	r24, X+
    1270:	01 90       	ld	r0, Z+
    1272:	80 19       	sub	r24, r0
    1274:	01 10       	cpse	r0, r1
    1276:	d9 f3       	breq	.-10     	; 0x126e <strcmp+0x4>
    1278:	99 0b       	sbc	r25, r25
    127a:	08 95       	ret

0000127c <strcpy>:
    127c:	fb 01       	movw	r30, r22
    127e:	dc 01       	movw	r26, r24
    1280:	01 90       	ld	r0, Z+
    1282:	0d 92       	st	X+, r0
    1284:	00 20       	and	r0, r0
    1286:	e1 f7       	brne	.-8      	; 0x1280 <strcpy+0x4>
    1288:	08 95       	ret

0000128a <printf>:
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	fe 01       	movw	r30, r28
    1294:	35 96       	adiw	r30, 0x05	; 5
    1296:	61 91       	ld	r22, Z+
    1298:	71 91       	ld	r23, Z+
    129a:	80 91 c4 08 	lds	r24, 0x08C4
    129e:	90 91 c5 08 	lds	r25, 0x08C5
    12a2:	af 01       	movw	r20, r30
    12a4:	0e 94 8c 09 	call	0x1318	; 0x1318 <vfprintf>
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <puts>:
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	8c 01       	movw	r16, r24
    12b8:	e0 91 c4 08 	lds	r30, 0x08C4
    12bc:	f0 91 c5 08 	lds	r31, 0x08C5
    12c0:	83 81       	ldd	r24, Z+3	; 0x03
    12c2:	81 ff       	sbrs	r24, 1
    12c4:	21 c0       	rjmp	.+66     	; 0x1308 <puts+0x5a>
    12c6:	c0 e0       	ldi	r28, 0x00	; 0
    12c8:	d0 e0       	ldi	r29, 0x00	; 0
    12ca:	0d c0       	rjmp	.+26     	; 0x12e6 <puts+0x38>
    12cc:	e0 91 c4 08 	lds	r30, 0x08C4
    12d0:	f0 91 c5 08 	lds	r31, 0x08C5
    12d4:	20 85       	ldd	r18, Z+8	; 0x08
    12d6:	31 85       	ldd	r19, Z+9	; 0x09
    12d8:	bf 01       	movw	r22, r30
    12da:	f9 01       	movw	r30, r18
    12dc:	09 95       	icall
    12de:	89 2b       	or	r24, r25
    12e0:	11 f0       	breq	.+4      	; 0x12e6 <puts+0x38>
    12e2:	cf ef       	ldi	r28, 0xFF	; 255
    12e4:	df ef       	ldi	r29, 0xFF	; 255
    12e6:	f8 01       	movw	r30, r16
    12e8:	81 91       	ld	r24, Z+
    12ea:	8f 01       	movw	r16, r30
    12ec:	88 23       	and	r24, r24
    12ee:	71 f7       	brne	.-36     	; 0x12cc <puts+0x1e>
    12f0:	e0 91 c4 08 	lds	r30, 0x08C4
    12f4:	f0 91 c5 08 	lds	r31, 0x08C5
    12f8:	20 85       	ldd	r18, Z+8	; 0x08
    12fa:	31 85       	ldd	r19, Z+9	; 0x09
    12fc:	8a e0       	ldi	r24, 0x0A	; 10
    12fe:	bf 01       	movw	r22, r30
    1300:	f9 01       	movw	r30, r18
    1302:	09 95       	icall
    1304:	89 2b       	or	r24, r25
    1306:	11 f0       	breq	.+4      	; 0x130c <puts+0x5e>
    1308:	cf ef       	ldi	r28, 0xFF	; 255
    130a:	df ef       	ldi	r29, 0xFF	; 255
    130c:	ce 01       	movw	r24, r28
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	08 95       	ret

00001318 <vfprintf>:
    1318:	2f 92       	push	r2
    131a:	3f 92       	push	r3
    131c:	4f 92       	push	r4
    131e:	5f 92       	push	r5
    1320:	6f 92       	push	r6
    1322:	7f 92       	push	r7
    1324:	8f 92       	push	r8
    1326:	9f 92       	push	r9
    1328:	af 92       	push	r10
    132a:	bf 92       	push	r11
    132c:	cf 92       	push	r12
    132e:	df 92       	push	r13
    1330:	ef 92       	push	r14
    1332:	ff 92       	push	r15
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	2b 97       	sbiw	r28, 0x0b	; 11
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	3c 01       	movw	r6, r24
    134e:	2b 01       	movw	r4, r22
    1350:	5a 01       	movw	r10, r20
    1352:	fc 01       	movw	r30, r24
    1354:	17 82       	std	Z+7, r1	; 0x07
    1356:	16 82       	std	Z+6, r1	; 0x06
    1358:	83 81       	ldd	r24, Z+3	; 0x03
    135a:	81 fd       	sbrc	r24, 1
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <vfprintf+0x4c>
    135e:	6f ef       	ldi	r22, 0xFF	; 255
    1360:	7f ef       	ldi	r23, 0xFF	; 255
    1362:	c6 c1       	rjmp	.+908    	; 0x16f0 <vfprintf+0x3d8>
    1364:	9a e0       	ldi	r25, 0x0A	; 10
    1366:	89 2e       	mov	r8, r25
    1368:	1e 01       	movw	r2, r28
    136a:	08 94       	sec
    136c:	21 1c       	adc	r2, r1
    136e:	31 1c       	adc	r3, r1
    1370:	f3 01       	movw	r30, r6
    1372:	23 81       	ldd	r18, Z+3	; 0x03
    1374:	f2 01       	movw	r30, r4
    1376:	23 fd       	sbrc	r18, 3
    1378:	85 91       	lpm	r24, Z+
    137a:	23 ff       	sbrs	r18, 3
    137c:	81 91       	ld	r24, Z+
    137e:	2f 01       	movw	r4, r30
    1380:	88 23       	and	r24, r24
    1382:	09 f4       	brne	.+2      	; 0x1386 <vfprintf+0x6e>
    1384:	b2 c1       	rjmp	.+868    	; 0x16ea <vfprintf+0x3d2>
    1386:	85 32       	cpi	r24, 0x25	; 37
    1388:	39 f4       	brne	.+14     	; 0x1398 <vfprintf+0x80>
    138a:	23 fd       	sbrc	r18, 3
    138c:	85 91       	lpm	r24, Z+
    138e:	23 ff       	sbrs	r18, 3
    1390:	81 91       	ld	r24, Z+
    1392:	2f 01       	movw	r4, r30
    1394:	85 32       	cpi	r24, 0x25	; 37
    1396:	29 f4       	brne	.+10     	; 0x13a2 <vfprintf+0x8a>
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	b3 01       	movw	r22, r6
    139c:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    13a0:	e7 cf       	rjmp	.-50     	; 0x1370 <vfprintf+0x58>
    13a2:	98 2f       	mov	r25, r24
    13a4:	ff 24       	eor	r15, r15
    13a6:	ee 24       	eor	r14, r14
    13a8:	99 24       	eor	r9, r9
    13aa:	ff e1       	ldi	r31, 0x1F	; 31
    13ac:	ff 15       	cp	r31, r15
    13ae:	d0 f0       	brcs	.+52     	; 0x13e4 <vfprintf+0xcc>
    13b0:	9b 32       	cpi	r25, 0x2B	; 43
    13b2:	69 f0       	breq	.+26     	; 0x13ce <vfprintf+0xb6>
    13b4:	9c 32       	cpi	r25, 0x2C	; 44
    13b6:	28 f4       	brcc	.+10     	; 0x13c2 <vfprintf+0xaa>
    13b8:	90 32       	cpi	r25, 0x20	; 32
    13ba:	59 f0       	breq	.+22     	; 0x13d2 <vfprintf+0xba>
    13bc:	93 32       	cpi	r25, 0x23	; 35
    13be:	91 f4       	brne	.+36     	; 0x13e4 <vfprintf+0xcc>
    13c0:	0e c0       	rjmp	.+28     	; 0x13de <vfprintf+0xc6>
    13c2:	9d 32       	cpi	r25, 0x2D	; 45
    13c4:	49 f0       	breq	.+18     	; 0x13d8 <vfprintf+0xc0>
    13c6:	90 33       	cpi	r25, 0x30	; 48
    13c8:	69 f4       	brne	.+26     	; 0x13e4 <vfprintf+0xcc>
    13ca:	41 e0       	ldi	r20, 0x01	; 1
    13cc:	24 c0       	rjmp	.+72     	; 0x1416 <vfprintf+0xfe>
    13ce:	52 e0       	ldi	r21, 0x02	; 2
    13d0:	f5 2a       	or	r15, r21
    13d2:	84 e0       	ldi	r24, 0x04	; 4
    13d4:	f8 2a       	or	r15, r24
    13d6:	28 c0       	rjmp	.+80     	; 0x1428 <vfprintf+0x110>
    13d8:	98 e0       	ldi	r25, 0x08	; 8
    13da:	f9 2a       	or	r15, r25
    13dc:	25 c0       	rjmp	.+74     	; 0x1428 <vfprintf+0x110>
    13de:	e0 e1       	ldi	r30, 0x10	; 16
    13e0:	fe 2a       	or	r15, r30
    13e2:	22 c0       	rjmp	.+68     	; 0x1428 <vfprintf+0x110>
    13e4:	f7 fc       	sbrc	r15, 7
    13e6:	29 c0       	rjmp	.+82     	; 0x143a <vfprintf+0x122>
    13e8:	89 2f       	mov	r24, r25
    13ea:	80 53       	subi	r24, 0x30	; 48
    13ec:	8a 30       	cpi	r24, 0x0A	; 10
    13ee:	70 f4       	brcc	.+28     	; 0x140c <vfprintf+0xf4>
    13f0:	f6 fe       	sbrs	r15, 6
    13f2:	05 c0       	rjmp	.+10     	; 0x13fe <vfprintf+0xe6>
    13f4:	98 9c       	mul	r9, r8
    13f6:	90 2c       	mov	r9, r0
    13f8:	11 24       	eor	r1, r1
    13fa:	98 0e       	add	r9, r24
    13fc:	15 c0       	rjmp	.+42     	; 0x1428 <vfprintf+0x110>
    13fe:	e8 9c       	mul	r14, r8
    1400:	e0 2c       	mov	r14, r0
    1402:	11 24       	eor	r1, r1
    1404:	e8 0e       	add	r14, r24
    1406:	f0 e2       	ldi	r31, 0x20	; 32
    1408:	ff 2a       	or	r15, r31
    140a:	0e c0       	rjmp	.+28     	; 0x1428 <vfprintf+0x110>
    140c:	9e 32       	cpi	r25, 0x2E	; 46
    140e:	29 f4       	brne	.+10     	; 0x141a <vfprintf+0x102>
    1410:	f6 fc       	sbrc	r15, 6
    1412:	6b c1       	rjmp	.+726    	; 0x16ea <vfprintf+0x3d2>
    1414:	40 e4       	ldi	r20, 0x40	; 64
    1416:	f4 2a       	or	r15, r20
    1418:	07 c0       	rjmp	.+14     	; 0x1428 <vfprintf+0x110>
    141a:	9c 36       	cpi	r25, 0x6C	; 108
    141c:	19 f4       	brne	.+6      	; 0x1424 <vfprintf+0x10c>
    141e:	50 e8       	ldi	r21, 0x80	; 128
    1420:	f5 2a       	or	r15, r21
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <vfprintf+0x110>
    1424:	98 36       	cpi	r25, 0x68	; 104
    1426:	49 f4       	brne	.+18     	; 0x143a <vfprintf+0x122>
    1428:	f2 01       	movw	r30, r4
    142a:	23 fd       	sbrc	r18, 3
    142c:	95 91       	lpm	r25, Z+
    142e:	23 ff       	sbrs	r18, 3
    1430:	91 91       	ld	r25, Z+
    1432:	2f 01       	movw	r4, r30
    1434:	99 23       	and	r25, r25
    1436:	09 f0       	breq	.+2      	; 0x143a <vfprintf+0x122>
    1438:	b8 cf       	rjmp	.-144    	; 0x13aa <vfprintf+0x92>
    143a:	89 2f       	mov	r24, r25
    143c:	85 54       	subi	r24, 0x45	; 69
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	18 f0       	brcs	.+6      	; 0x1448 <vfprintf+0x130>
    1442:	80 52       	subi	r24, 0x20	; 32
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	38 f4       	brcc	.+14     	; 0x1456 <vfprintf+0x13e>
    1448:	44 e0       	ldi	r20, 0x04	; 4
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	a4 0e       	add	r10, r20
    144e:	b5 1e       	adc	r11, r21
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	59 83       	std	Y+1, r21	; 0x01
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <vfprintf+0x15c>
    1456:	93 36       	cpi	r25, 0x63	; 99
    1458:	31 f0       	breq	.+12     	; 0x1466 <vfprintf+0x14e>
    145a:	93 37       	cpi	r25, 0x73	; 115
    145c:	79 f0       	breq	.+30     	; 0x147c <vfprintf+0x164>
    145e:	93 35       	cpi	r25, 0x53	; 83
    1460:	09 f0       	breq	.+2      	; 0x1464 <vfprintf+0x14c>
    1462:	56 c0       	rjmp	.+172    	; 0x1510 <vfprintf+0x1f8>
    1464:	20 c0       	rjmp	.+64     	; 0x14a6 <vfprintf+0x18e>
    1466:	f5 01       	movw	r30, r10
    1468:	80 81       	ld	r24, Z
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	42 e0       	ldi	r20, 0x02	; 2
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	a4 0e       	add	r10, r20
    1472:	b5 1e       	adc	r11, r21
    1474:	61 01       	movw	r12, r2
    1476:	01 e0       	ldi	r16, 0x01	; 1
    1478:	10 e0       	ldi	r17, 0x00	; 0
    147a:	12 c0       	rjmp	.+36     	; 0x14a0 <vfprintf+0x188>
    147c:	f5 01       	movw	r30, r10
    147e:	c0 80       	ld	r12, Z
    1480:	d1 80       	ldd	r13, Z+1	; 0x01
    1482:	f6 fc       	sbrc	r15, 6
    1484:	03 c0       	rjmp	.+6      	; 0x148c <vfprintf+0x174>
    1486:	6f ef       	ldi	r22, 0xFF	; 255
    1488:	7f ef       	ldi	r23, 0xFF	; 255
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <vfprintf+0x178>
    148c:	69 2d       	mov	r22, r9
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	42 e0       	ldi	r20, 0x02	; 2
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	a4 0e       	add	r10, r20
    1496:	b5 1e       	adc	r11, r21
    1498:	c6 01       	movw	r24, r12
    149a:	0e 94 9d 0b 	call	0x173a	; 0x173a <strnlen>
    149e:	8c 01       	movw	r16, r24
    14a0:	5f e7       	ldi	r21, 0x7F	; 127
    14a2:	f5 22       	and	r15, r21
    14a4:	14 c0       	rjmp	.+40     	; 0x14ce <vfprintf+0x1b6>
    14a6:	f5 01       	movw	r30, r10
    14a8:	c0 80       	ld	r12, Z
    14aa:	d1 80       	ldd	r13, Z+1	; 0x01
    14ac:	f6 fc       	sbrc	r15, 6
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <vfprintf+0x19e>
    14b0:	6f ef       	ldi	r22, 0xFF	; 255
    14b2:	7f ef       	ldi	r23, 0xFF	; 255
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <vfprintf+0x1a2>
    14b6:	69 2d       	mov	r22, r9
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	42 e0       	ldi	r20, 0x02	; 2
    14bc:	50 e0       	ldi	r21, 0x00	; 0
    14be:	a4 0e       	add	r10, r20
    14c0:	b5 1e       	adc	r11, r21
    14c2:	c6 01       	movw	r24, r12
    14c4:	0e 94 92 0b 	call	0x1724	; 0x1724 <strnlen_P>
    14c8:	8c 01       	movw	r16, r24
    14ca:	50 e8       	ldi	r21, 0x80	; 128
    14cc:	f5 2a       	or	r15, r21
    14ce:	f3 fe       	sbrs	r15, 3
    14d0:	07 c0       	rjmp	.+14     	; 0x14e0 <vfprintf+0x1c8>
    14d2:	1a c0       	rjmp	.+52     	; 0x1508 <vfprintf+0x1f0>
    14d4:	80 e2       	ldi	r24, 0x20	; 32
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	b3 01       	movw	r22, r6
    14da:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    14de:	ea 94       	dec	r14
    14e0:	8e 2d       	mov	r24, r14
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	08 17       	cp	r16, r24
    14e6:	19 07       	cpc	r17, r25
    14e8:	a8 f3       	brcs	.-22     	; 0x14d4 <vfprintf+0x1bc>
    14ea:	0e c0       	rjmp	.+28     	; 0x1508 <vfprintf+0x1f0>
    14ec:	f6 01       	movw	r30, r12
    14ee:	f7 fc       	sbrc	r15, 7
    14f0:	85 91       	lpm	r24, Z+
    14f2:	f7 fe       	sbrs	r15, 7
    14f4:	81 91       	ld	r24, Z+
    14f6:	6f 01       	movw	r12, r30
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	b3 01       	movw	r22, r6
    14fc:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    1500:	e1 10       	cpse	r14, r1
    1502:	ea 94       	dec	r14
    1504:	01 50       	subi	r16, 0x01	; 1
    1506:	10 40       	sbci	r17, 0x00	; 0
    1508:	01 15       	cp	r16, r1
    150a:	11 05       	cpc	r17, r1
    150c:	79 f7       	brne	.-34     	; 0x14ec <vfprintf+0x1d4>
    150e:	ea c0       	rjmp	.+468    	; 0x16e4 <vfprintf+0x3cc>
    1510:	94 36       	cpi	r25, 0x64	; 100
    1512:	11 f0       	breq	.+4      	; 0x1518 <vfprintf+0x200>
    1514:	99 36       	cpi	r25, 0x69	; 105
    1516:	69 f5       	brne	.+90     	; 0x1572 <vfprintf+0x25a>
    1518:	f7 fe       	sbrs	r15, 7
    151a:	08 c0       	rjmp	.+16     	; 0x152c <vfprintf+0x214>
    151c:	f5 01       	movw	r30, r10
    151e:	20 81       	ld	r18, Z
    1520:	31 81       	ldd	r19, Z+1	; 0x01
    1522:	42 81       	ldd	r20, Z+2	; 0x02
    1524:	53 81       	ldd	r21, Z+3	; 0x03
    1526:	84 e0       	ldi	r24, 0x04	; 4
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0a c0       	rjmp	.+20     	; 0x1540 <vfprintf+0x228>
    152c:	f5 01       	movw	r30, r10
    152e:	80 81       	ld	r24, Z
    1530:	91 81       	ldd	r25, Z+1	; 0x01
    1532:	9c 01       	movw	r18, r24
    1534:	44 27       	eor	r20, r20
    1536:	37 fd       	sbrc	r19, 7
    1538:	40 95       	com	r20
    153a:	54 2f       	mov	r21, r20
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	a8 0e       	add	r10, r24
    1542:	b9 1e       	adc	r11, r25
    1544:	9f e6       	ldi	r25, 0x6F	; 111
    1546:	f9 22       	and	r15, r25
    1548:	57 ff       	sbrs	r21, 7
    154a:	09 c0       	rjmp	.+18     	; 0x155e <vfprintf+0x246>
    154c:	50 95       	com	r21
    154e:	40 95       	com	r20
    1550:	30 95       	com	r19
    1552:	21 95       	neg	r18
    1554:	3f 4f       	sbci	r19, 0xFF	; 255
    1556:	4f 4f       	sbci	r20, 0xFF	; 255
    1558:	5f 4f       	sbci	r21, 0xFF	; 255
    155a:	e0 e8       	ldi	r30, 0x80	; 128
    155c:	fe 2a       	or	r15, r30
    155e:	ca 01       	movw	r24, r20
    1560:	b9 01       	movw	r22, r18
    1562:	a1 01       	movw	r20, r2
    1564:	2a e0       	ldi	r18, 0x0A	; 10
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__ultoa_invert>
    156c:	d8 2e       	mov	r13, r24
    156e:	d2 18       	sub	r13, r2
    1570:	40 c0       	rjmp	.+128    	; 0x15f2 <vfprintf+0x2da>
    1572:	95 37       	cpi	r25, 0x75	; 117
    1574:	29 f4       	brne	.+10     	; 0x1580 <vfprintf+0x268>
    1576:	1f 2d       	mov	r17, r15
    1578:	1f 7e       	andi	r17, 0xEF	; 239
    157a:	2a e0       	ldi	r18, 0x0A	; 10
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	1d c0       	rjmp	.+58     	; 0x15ba <vfprintf+0x2a2>
    1580:	1f 2d       	mov	r17, r15
    1582:	19 7f       	andi	r17, 0xF9	; 249
    1584:	9f 36       	cpi	r25, 0x6F	; 111
    1586:	61 f0       	breq	.+24     	; 0x15a0 <vfprintf+0x288>
    1588:	90 37       	cpi	r25, 0x70	; 112
    158a:	20 f4       	brcc	.+8      	; 0x1594 <vfprintf+0x27c>
    158c:	98 35       	cpi	r25, 0x58	; 88
    158e:	09 f0       	breq	.+2      	; 0x1592 <vfprintf+0x27a>
    1590:	ac c0       	rjmp	.+344    	; 0x16ea <vfprintf+0x3d2>
    1592:	0f c0       	rjmp	.+30     	; 0x15b2 <vfprintf+0x29a>
    1594:	90 37       	cpi	r25, 0x70	; 112
    1596:	39 f0       	breq	.+14     	; 0x15a6 <vfprintf+0x28e>
    1598:	98 37       	cpi	r25, 0x78	; 120
    159a:	09 f0       	breq	.+2      	; 0x159e <vfprintf+0x286>
    159c:	a6 c0       	rjmp	.+332    	; 0x16ea <vfprintf+0x3d2>
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <vfprintf+0x290>
    15a0:	28 e0       	ldi	r18, 0x08	; 8
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	0a c0       	rjmp	.+20     	; 0x15ba <vfprintf+0x2a2>
    15a6:	10 61       	ori	r17, 0x10	; 16
    15a8:	14 fd       	sbrc	r17, 4
    15aa:	14 60       	ori	r17, 0x04	; 4
    15ac:	20 e1       	ldi	r18, 0x10	; 16
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <vfprintf+0x2a2>
    15b2:	14 fd       	sbrc	r17, 4
    15b4:	16 60       	ori	r17, 0x06	; 6
    15b6:	20 e1       	ldi	r18, 0x10	; 16
    15b8:	32 e0       	ldi	r19, 0x02	; 2
    15ba:	17 ff       	sbrs	r17, 7
    15bc:	08 c0       	rjmp	.+16     	; 0x15ce <vfprintf+0x2b6>
    15be:	f5 01       	movw	r30, r10
    15c0:	60 81       	ld	r22, Z
    15c2:	71 81       	ldd	r23, Z+1	; 0x01
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	44 e0       	ldi	r20, 0x04	; 4
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	08 c0       	rjmp	.+16     	; 0x15de <vfprintf+0x2c6>
    15ce:	f5 01       	movw	r30, r10
    15d0:	80 81       	ld	r24, Z
    15d2:	91 81       	ldd	r25, Z+1	; 0x01
    15d4:	bc 01       	movw	r22, r24
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	42 e0       	ldi	r20, 0x02	; 2
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	a4 0e       	add	r10, r20
    15e0:	b5 1e       	adc	r11, r21
    15e2:	a1 01       	movw	r20, r2
    15e4:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__ultoa_invert>
    15e8:	d8 2e       	mov	r13, r24
    15ea:	d2 18       	sub	r13, r2
    15ec:	8f e7       	ldi	r24, 0x7F	; 127
    15ee:	f8 2e       	mov	r15, r24
    15f0:	f1 22       	and	r15, r17
    15f2:	f6 fe       	sbrs	r15, 6
    15f4:	0b c0       	rjmp	.+22     	; 0x160c <vfprintf+0x2f4>
    15f6:	5e ef       	ldi	r21, 0xFE	; 254
    15f8:	f5 22       	and	r15, r21
    15fa:	d9 14       	cp	r13, r9
    15fc:	38 f4       	brcc	.+14     	; 0x160c <vfprintf+0x2f4>
    15fe:	f4 fe       	sbrs	r15, 4
    1600:	07 c0       	rjmp	.+14     	; 0x1610 <vfprintf+0x2f8>
    1602:	f2 fc       	sbrc	r15, 2
    1604:	05 c0       	rjmp	.+10     	; 0x1610 <vfprintf+0x2f8>
    1606:	8f ee       	ldi	r24, 0xEF	; 239
    1608:	f8 22       	and	r15, r24
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <vfprintf+0x2f8>
    160c:	1d 2d       	mov	r17, r13
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <vfprintf+0x2fa>
    1610:	19 2d       	mov	r17, r9
    1612:	f4 fe       	sbrs	r15, 4
    1614:	0d c0       	rjmp	.+26     	; 0x1630 <vfprintf+0x318>
    1616:	fe 01       	movw	r30, r28
    1618:	ed 0d       	add	r30, r13
    161a:	f1 1d       	adc	r31, r1
    161c:	80 81       	ld	r24, Z
    161e:	80 33       	cpi	r24, 0x30	; 48
    1620:	19 f4       	brne	.+6      	; 0x1628 <vfprintf+0x310>
    1622:	99 ee       	ldi	r25, 0xE9	; 233
    1624:	f9 22       	and	r15, r25
    1626:	08 c0       	rjmp	.+16     	; 0x1638 <vfprintf+0x320>
    1628:	1f 5f       	subi	r17, 0xFF	; 255
    162a:	f2 fe       	sbrs	r15, 2
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <vfprintf+0x320>
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <vfprintf+0x31e>
    1630:	8f 2d       	mov	r24, r15
    1632:	86 78       	andi	r24, 0x86	; 134
    1634:	09 f0       	breq	.+2      	; 0x1638 <vfprintf+0x320>
    1636:	1f 5f       	subi	r17, 0xFF	; 255
    1638:	0f 2d       	mov	r16, r15
    163a:	f3 fc       	sbrc	r15, 3
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <vfprintf+0x34e>
    163e:	f0 fe       	sbrs	r15, 0
    1640:	0f c0       	rjmp	.+30     	; 0x1660 <vfprintf+0x348>
    1642:	1e 15       	cp	r17, r14
    1644:	10 f0       	brcs	.+4      	; 0x164a <vfprintf+0x332>
    1646:	9d 2c       	mov	r9, r13
    1648:	0b c0       	rjmp	.+22     	; 0x1660 <vfprintf+0x348>
    164a:	9d 2c       	mov	r9, r13
    164c:	9e 0c       	add	r9, r14
    164e:	91 1a       	sub	r9, r17
    1650:	1e 2d       	mov	r17, r14
    1652:	06 c0       	rjmp	.+12     	; 0x1660 <vfprintf+0x348>
    1654:	80 e2       	ldi	r24, 0x20	; 32
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	b3 01       	movw	r22, r6
    165a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    165e:	1f 5f       	subi	r17, 0xFF	; 255
    1660:	1e 15       	cp	r17, r14
    1662:	c0 f3       	brcs	.-16     	; 0x1654 <vfprintf+0x33c>
    1664:	04 c0       	rjmp	.+8      	; 0x166e <vfprintf+0x356>
    1666:	1e 15       	cp	r17, r14
    1668:	10 f4       	brcc	.+4      	; 0x166e <vfprintf+0x356>
    166a:	e1 1a       	sub	r14, r17
    166c:	01 c0       	rjmp	.+2      	; 0x1670 <vfprintf+0x358>
    166e:	ee 24       	eor	r14, r14
    1670:	04 ff       	sbrs	r16, 4
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <vfprintf+0x37a>
    1674:	80 e3       	ldi	r24, 0x30	; 48
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	b3 01       	movw	r22, r6
    167a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    167e:	02 ff       	sbrs	r16, 2
    1680:	1d c0       	rjmp	.+58     	; 0x16bc <vfprintf+0x3a4>
    1682:	01 fd       	sbrc	r16, 1
    1684:	03 c0       	rjmp	.+6      	; 0x168c <vfprintf+0x374>
    1686:	88 e7       	ldi	r24, 0x78	; 120
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	0e c0       	rjmp	.+28     	; 0x16a8 <vfprintf+0x390>
    168c:	88 e5       	ldi	r24, 0x58	; 88
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0b c0       	rjmp	.+22     	; 0x16a8 <vfprintf+0x390>
    1692:	80 2f       	mov	r24, r16
    1694:	86 78       	andi	r24, 0x86	; 134
    1696:	91 f0       	breq	.+36     	; 0x16bc <vfprintf+0x3a4>
    1698:	01 ff       	sbrs	r16, 1
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <vfprintf+0x388>
    169c:	8b e2       	ldi	r24, 0x2B	; 43
    169e:	01 c0       	rjmp	.+2      	; 0x16a2 <vfprintf+0x38a>
    16a0:	80 e2       	ldi	r24, 0x20	; 32
    16a2:	f7 fc       	sbrc	r15, 7
    16a4:	8d e2       	ldi	r24, 0x2D	; 45
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	b3 01       	movw	r22, r6
    16aa:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    16ae:	06 c0       	rjmp	.+12     	; 0x16bc <vfprintf+0x3a4>
    16b0:	80 e3       	ldi	r24, 0x30	; 48
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	b3 01       	movw	r22, r6
    16b6:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    16ba:	9a 94       	dec	r9
    16bc:	d9 14       	cp	r13, r9
    16be:	c0 f3       	brcs	.-16     	; 0x16b0 <vfprintf+0x398>
    16c0:	da 94       	dec	r13
    16c2:	f1 01       	movw	r30, r2
    16c4:	ed 0d       	add	r30, r13
    16c6:	f1 1d       	adc	r31, r1
    16c8:	80 81       	ld	r24, Z
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	b3 01       	movw	r22, r6
    16ce:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    16d2:	dd 20       	and	r13, r13
    16d4:	a9 f7       	brne	.-22     	; 0x16c0 <vfprintf+0x3a8>
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <vfprintf+0x3cc>
    16d8:	80 e2       	ldi	r24, 0x20	; 32
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	b3 01       	movw	r22, r6
    16de:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fputc>
    16e2:	ea 94       	dec	r14
    16e4:	ee 20       	and	r14, r14
    16e6:	c1 f7       	brne	.-16     	; 0x16d8 <vfprintf+0x3c0>
    16e8:	43 ce       	rjmp	.-890    	; 0x1370 <vfprintf+0x58>
    16ea:	f3 01       	movw	r30, r6
    16ec:	66 81       	ldd	r22, Z+6	; 0x06
    16ee:	77 81       	ldd	r23, Z+7	; 0x07
    16f0:	cb 01       	movw	r24, r22
    16f2:	2b 96       	adiw	r28, 0x0b	; 11
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	df 90       	pop	r13
    170c:	cf 90       	pop	r12
    170e:	bf 90       	pop	r11
    1710:	af 90       	pop	r10
    1712:	9f 90       	pop	r9
    1714:	8f 90       	pop	r8
    1716:	7f 90       	pop	r7
    1718:	6f 90       	pop	r6
    171a:	5f 90       	pop	r5
    171c:	4f 90       	pop	r4
    171e:	3f 90       	pop	r3
    1720:	2f 90       	pop	r2
    1722:	08 95       	ret

00001724 <strnlen_P>:
    1724:	fc 01       	movw	r30, r24
    1726:	05 90       	lpm	r0, Z+
    1728:	61 50       	subi	r22, 0x01	; 1
    172a:	70 40       	sbci	r23, 0x00	; 0
    172c:	01 10       	cpse	r0, r1
    172e:	d8 f7       	brcc	.-10     	; 0x1726 <strnlen_P+0x2>
    1730:	80 95       	com	r24
    1732:	90 95       	com	r25
    1734:	8e 0f       	add	r24, r30
    1736:	9f 1f       	adc	r25, r31
    1738:	08 95       	ret

0000173a <strnlen>:
    173a:	fc 01       	movw	r30, r24
    173c:	61 50       	subi	r22, 0x01	; 1
    173e:	70 40       	sbci	r23, 0x00	; 0
    1740:	01 90       	ld	r0, Z+
    1742:	01 10       	cpse	r0, r1
    1744:	d8 f7       	brcc	.-10     	; 0x173c <strnlen+0x2>
    1746:	80 95       	com	r24
    1748:	90 95       	com	r25
    174a:	8e 0f       	add	r24, r30
    174c:	9f 1f       	adc	r25, r31
    174e:	08 95       	ret

00001750 <fputc>:
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	8c 01       	movw	r16, r24
    175a:	eb 01       	movw	r28, r22
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	81 ff       	sbrs	r24, 1
    1760:	1b c0       	rjmp	.+54     	; 0x1798 <fputc+0x48>
    1762:	82 ff       	sbrs	r24, 2
    1764:	0d c0       	rjmp	.+26     	; 0x1780 <fputc+0x30>
    1766:	2e 81       	ldd	r18, Y+6	; 0x06
    1768:	3f 81       	ldd	r19, Y+7	; 0x07
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	9d 81       	ldd	r25, Y+5	; 0x05
    176e:	28 17       	cp	r18, r24
    1770:	39 07       	cpc	r19, r25
    1772:	64 f4       	brge	.+24     	; 0x178c <fputc+0x3c>
    1774:	e8 81       	ld	r30, Y
    1776:	f9 81       	ldd	r31, Y+1	; 0x01
    1778:	01 93       	st	Z+, r16
    177a:	f9 83       	std	Y+1, r31	; 0x01
    177c:	e8 83       	st	Y, r30
    177e:	06 c0       	rjmp	.+12     	; 0x178c <fputc+0x3c>
    1780:	e8 85       	ldd	r30, Y+8	; 0x08
    1782:	f9 85       	ldd	r31, Y+9	; 0x09
    1784:	80 2f       	mov	r24, r16
    1786:	09 95       	icall
    1788:	89 2b       	or	r24, r25
    178a:	31 f4       	brne	.+12     	; 0x1798 <fputc+0x48>
    178c:	8e 81       	ldd	r24, Y+6	; 0x06
    178e:	9f 81       	ldd	r25, Y+7	; 0x07
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	9f 83       	std	Y+7, r25	; 0x07
    1794:	8e 83       	std	Y+6, r24	; 0x06
    1796:	02 c0       	rjmp	.+4      	; 0x179c <fputc+0x4c>
    1798:	0f ef       	ldi	r16, 0xFF	; 255
    179a:	1f ef       	ldi	r17, 0xFF	; 255
    179c:	c8 01       	movw	r24, r16
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	08 95       	ret

000017a8 <__ultoa_invert>:
    17a8:	fa 01       	movw	r30, r20
    17aa:	aa 27       	eor	r26, r26
    17ac:	28 30       	cpi	r18, 0x08	; 8
    17ae:	51 f1       	breq	.+84     	; 0x1804 <__ultoa_invert+0x5c>
    17b0:	20 31       	cpi	r18, 0x10	; 16
    17b2:	81 f1       	breq	.+96     	; 0x1814 <__ultoa_invert+0x6c>
    17b4:	e8 94       	clt
    17b6:	6f 93       	push	r22
    17b8:	6e 7f       	andi	r22, 0xFE	; 254
    17ba:	6e 5f       	subi	r22, 0xFE	; 254
    17bc:	7f 4f       	sbci	r23, 0xFF	; 255
    17be:	8f 4f       	sbci	r24, 0xFF	; 255
    17c0:	9f 4f       	sbci	r25, 0xFF	; 255
    17c2:	af 4f       	sbci	r26, 0xFF	; 255
    17c4:	b1 e0       	ldi	r27, 0x01	; 1
    17c6:	3e d0       	rcall	.+124    	; 0x1844 <__ultoa_invert+0x9c>
    17c8:	b4 e0       	ldi	r27, 0x04	; 4
    17ca:	3c d0       	rcall	.+120    	; 0x1844 <__ultoa_invert+0x9c>
    17cc:	67 0f       	add	r22, r23
    17ce:	78 1f       	adc	r23, r24
    17d0:	89 1f       	adc	r24, r25
    17d2:	9a 1f       	adc	r25, r26
    17d4:	a1 1d       	adc	r26, r1
    17d6:	68 0f       	add	r22, r24
    17d8:	79 1f       	adc	r23, r25
    17da:	8a 1f       	adc	r24, r26
    17dc:	91 1d       	adc	r25, r1
    17de:	a1 1d       	adc	r26, r1
    17e0:	6a 0f       	add	r22, r26
    17e2:	71 1d       	adc	r23, r1
    17e4:	81 1d       	adc	r24, r1
    17e6:	91 1d       	adc	r25, r1
    17e8:	a1 1d       	adc	r26, r1
    17ea:	20 d0       	rcall	.+64     	; 0x182c <__ultoa_invert+0x84>
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <__ultoa_invert+0x48>
    17ee:	68 94       	set
    17f0:	3f 91       	pop	r19
    17f2:	2a e0       	ldi	r18, 0x0A	; 10
    17f4:	26 9f       	mul	r18, r22
    17f6:	11 24       	eor	r1, r1
    17f8:	30 19       	sub	r19, r0
    17fa:	30 5d       	subi	r19, 0xD0	; 208
    17fc:	31 93       	st	Z+, r19
    17fe:	de f6       	brtc	.-74     	; 0x17b6 <__ultoa_invert+0xe>
    1800:	cf 01       	movw	r24, r30
    1802:	08 95       	ret
    1804:	46 2f       	mov	r20, r22
    1806:	47 70       	andi	r20, 0x07	; 7
    1808:	40 5d       	subi	r20, 0xD0	; 208
    180a:	41 93       	st	Z+, r20
    180c:	b3 e0       	ldi	r27, 0x03	; 3
    180e:	0f d0       	rcall	.+30     	; 0x182e <__ultoa_invert+0x86>
    1810:	c9 f7       	brne	.-14     	; 0x1804 <__ultoa_invert+0x5c>
    1812:	f6 cf       	rjmp	.-20     	; 0x1800 <__ultoa_invert+0x58>
    1814:	46 2f       	mov	r20, r22
    1816:	4f 70       	andi	r20, 0x0F	; 15
    1818:	40 5d       	subi	r20, 0xD0	; 208
    181a:	4a 33       	cpi	r20, 0x3A	; 58
    181c:	18 f0       	brcs	.+6      	; 0x1824 <__ultoa_invert+0x7c>
    181e:	49 5d       	subi	r20, 0xD9	; 217
    1820:	31 fd       	sbrc	r19, 1
    1822:	40 52       	subi	r20, 0x20	; 32
    1824:	41 93       	st	Z+, r20
    1826:	02 d0       	rcall	.+4      	; 0x182c <__ultoa_invert+0x84>
    1828:	a9 f7       	brne	.-22     	; 0x1814 <__ultoa_invert+0x6c>
    182a:	ea cf       	rjmp	.-44     	; 0x1800 <__ultoa_invert+0x58>
    182c:	b4 e0       	ldi	r27, 0x04	; 4
    182e:	a6 95       	lsr	r26
    1830:	97 95       	ror	r25
    1832:	87 95       	ror	r24
    1834:	77 95       	ror	r23
    1836:	67 95       	ror	r22
    1838:	ba 95       	dec	r27
    183a:	c9 f7       	brne	.-14     	; 0x182e <__ultoa_invert+0x86>
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	61 05       	cpc	r22, r1
    1840:	71 05       	cpc	r23, r1
    1842:	08 95       	ret
    1844:	9b 01       	movw	r18, r22
    1846:	ac 01       	movw	r20, r24
    1848:	0a 2e       	mov	r0, r26
    184a:	06 94       	lsr	r0
    184c:	57 95       	ror	r21
    184e:	47 95       	ror	r20
    1850:	37 95       	ror	r19
    1852:	27 95       	ror	r18
    1854:	ba 95       	dec	r27
    1856:	c9 f7       	brne	.-14     	; 0x184a <__ultoa_invert+0xa2>
    1858:	62 0f       	add	r22, r18
    185a:	73 1f       	adc	r23, r19
    185c:	84 1f       	adc	r24, r20
    185e:	95 1f       	adc	r25, r21
    1860:	a0 1d       	adc	r26, r0
    1862:	08 95       	ret

00001864 <_exit>:
    1864:	f8 94       	cli

00001866 <__stop_program>:
    1866:	ff cf       	rjmp	.-2      	; 0x1866 <__stop_program>
