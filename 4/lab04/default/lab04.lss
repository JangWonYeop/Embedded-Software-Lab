
lab04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000336  000003ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000336  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800114  00800114  000003de  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000039  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000380  00000000  00000000  00000437  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000142  00000000  00000000  000007b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031a  00000000  00000000  000008f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000cf  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d8  00000000  00000000  00000d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00000edb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 99 01 	jmp	0x332	; 0x332 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:

volatile int num = 0;
volatile int onOff = 0;
volatile int tempNum = 0;

void main(){
  ce:	bf 92       	push	r11
  d0:	cf 92       	push	r12
  d2:	df 92       	push	r13
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
		0x80, // . 
		0x40, // - 
		0x08  // _
	};	

	DDRE = 0xcf;
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xff;
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	84 bb       	out	0x14, r24	; 20
		PORTG = 0x08;
		_delay_ms(3);
		}
		else{
			PORTC = FND_DATA[tempNum%10];
		PORTG = 0x01;
  e8:	bb 24       	eor	r11, r11
  ea:	b3 94       	inc	r11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ec:	c0 e4       	ldi	r28, 0x40	; 64
  ee:	df e1       	ldi	r29, 0x1F	; 31
		_delay_ms(2);

		PORTC = FND_DATA[(tempNum/10)%10];
		PORTG = 0x02;
  f0:	22 e0       	ldi	r18, 0x02	; 2
  f2:	c2 2e       	mov	r12, r18
  f4:	20 ee       	ldi	r18, 0xE0	; 224
  f6:	3e e2       	ldi	r19, 0x2E	; 46
		_delay_ms(3);

		PORTC = FND_DATA[(tempNum/100)%10];
		PORTG = 0x04;
  f8:	94 e0       	ldi	r25, 0x04	; 4
  fa:	d9 2e       	mov	r13, r25
		_delay_ms(2);

		PORTC = FND_DATA[(tempNum/1000)%10];
		PORTG = 0x08;
  fc:	48 e0       	ldi	r20, 0x08	; 8
  fe:	00 e9       	ldi	r16, 0x90	; 144
 100:	11 e0       	ldi	r17, 0x01	; 1
		_delay_ms(3);
		}

		if(onOff == 0){
			if(PINE == 0x20){
				onOff = 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	e8 2e       	mov	r14, r24
 106:	f1 2c       	mov	r15, r1
	DDRE = 0xcf;
	DDRC = 0xff;

	while(1){
		
		if(onOff == 1){
 108:	80 91 16 01 	lds	r24, 0x0116
 10c:	90 91 17 01 	lds	r25, 0x0117
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	09 f0       	breq	.+2      	; 0x116 <main+0x48>
 114:	45 c0       	rjmp	.+138    	; 0x1a0 <main+0xd2>
		PORTC = FND_DATA[num%10];
 116:	80 91 14 01 	lds	r24, 0x0114
 11a:	90 91 15 01 	lds	r25, 0x0115
 11e:	6a e0       	ldi	r22, 0x0A	; 10
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodhi4>
 126:	fc 01       	movw	r30, r24
 128:	e0 50       	subi	r30, 0x00	; 0
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	80 81       	ld	r24, Z
 12e:	85 bb       	out	0x15, r24	; 21
		PORTG = 0x01;
 130:	b0 92 65 00 	sts	0x0065, r11
 134:	ce 01       	movw	r24, r28
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0x68>
		_delay_ms(2);

		PORTC = FND_DATA[(num/10)%10];
 13a:	80 91 14 01 	lds	r24, 0x0114
 13e:	90 91 15 01 	lds	r25, 0x0115
 142:	6a e0       	ldi	r22, 0x0A	; 10
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodhi4>
 14a:	cb 01       	movw	r24, r22
 14c:	6a e0       	ldi	r22, 0x0A	; 10
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodhi4>
 154:	fc 01       	movw	r30, r24
 156:	e0 50       	subi	r30, 0x00	; 0
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	80 81       	ld	r24, Z
 15c:	85 bb       	out	0x15, r24	; 21
		PORTG = 0x02;
 15e:	c0 92 65 00 	sts	0x0065, r12
 162:	c9 01       	movw	r24, r18
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0x96>
		_delay_ms(3);

		PORTC = FND_DATA[(num/100)%10];
 168:	80 91 14 01 	lds	r24, 0x0114
 16c:	90 91 15 01 	lds	r25, 0x0115
 170:	64 e6       	ldi	r22, 0x64	; 100
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodhi4>
 178:	cb 01       	movw	r24, r22
 17a:	6a e0       	ldi	r22, 0x0A	; 10
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodhi4>
 182:	fc 01       	movw	r30, r24
 184:	e0 50       	subi	r30, 0x00	; 0
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	80 81       	ld	r24, Z
 18a:	85 bb       	out	0x15, r24	; 21
		PORTG = 0x04;
 18c:	d0 92 65 00 	sts	0x0065, r13
 190:	ce 01       	movw	r24, r28
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0xc4>
		_delay_ms(2);

		PORTC = FND_DATA[(num/1000)%10];
 196:	80 91 14 01 	lds	r24, 0x0114
 19a:	90 91 15 01 	lds	r25, 0x0115
 19e:	44 c0       	rjmp	.+136    	; 0x228 <main+0x15a>
		PORTG = 0x08;
		_delay_ms(3);
		}
		else{
			PORTC = FND_DATA[tempNum%10];
 1a0:	80 91 18 01 	lds	r24, 0x0118
 1a4:	90 91 19 01 	lds	r25, 0x0119
 1a8:	6a e0       	ldi	r22, 0x0A	; 10
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodhi4>
 1b0:	fc 01       	movw	r30, r24
 1b2:	e0 50       	subi	r30, 0x00	; 0
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	80 81       	ld	r24, Z
 1b8:	85 bb       	out	0x15, r24	; 21
		PORTG = 0x01;
 1ba:	b0 92 65 00 	sts	0x0065, r11
 1be:	ce 01       	movw	r24, r28
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0xf2>
		_delay_ms(2);

		PORTC = FND_DATA[(tempNum/10)%10];
 1c4:	80 91 18 01 	lds	r24, 0x0118
 1c8:	90 91 19 01 	lds	r25, 0x0119
 1cc:	6a e0       	ldi	r22, 0x0A	; 10
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodhi4>
 1d4:	cb 01       	movw	r24, r22
 1d6:	6a e0       	ldi	r22, 0x0A	; 10
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodhi4>
 1de:	fc 01       	movw	r30, r24
 1e0:	e0 50       	subi	r30, 0x00	; 0
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	80 81       	ld	r24, Z
 1e6:	85 bb       	out	0x15, r24	; 21
		PORTG = 0x02;
 1e8:	c0 92 65 00 	sts	0x0065, r12
 1ec:	c9 01       	movw	r24, r18
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <main+0x120>
		_delay_ms(3);

		PORTC = FND_DATA[(tempNum/100)%10];
 1f2:	80 91 18 01 	lds	r24, 0x0118
 1f6:	90 91 19 01 	lds	r25, 0x0119
 1fa:	64 e6       	ldi	r22, 0x64	; 100
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodhi4>
 202:	cb 01       	movw	r24, r22
 204:	6a e0       	ldi	r22, 0x0A	; 10
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodhi4>
 20c:	fc 01       	movw	r30, r24
 20e:	e0 50       	subi	r30, 0x00	; 0
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	80 81       	ld	r24, Z
 214:	85 bb       	out	0x15, r24	; 21
		PORTG = 0x04;
 216:	d0 92 65 00 	sts	0x0065, r13
 21a:	ce 01       	movw	r24, r28
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <main+0x14e>
		_delay_ms(2);

		PORTC = FND_DATA[(tempNum/1000)%10];
 220:	80 91 18 01 	lds	r24, 0x0118
 224:	90 91 19 01 	lds	r25, 0x0119
 228:	68 ee       	ldi	r22, 0xE8	; 232
 22a:	73 e0       	ldi	r23, 0x03	; 3
 22c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodhi4>
 230:	cb 01       	movw	r24, r22
 232:	6a e0       	ldi	r22, 0x0A	; 10
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodhi4>
 23a:	fc 01       	movw	r30, r24
 23c:	e0 50       	subi	r30, 0x00	; 0
 23e:	ff 4f       	sbci	r31, 0xFF	; 255
 240:	80 81       	ld	r24, Z
 242:	85 bb       	out	0x15, r24	; 21
		PORTG = 0x08;
 244:	40 93 65 00 	sts	0x0065, r20
 248:	c9 01       	movw	r24, r18
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <main+0x17c>
		_delay_ms(3);
		}

		if(onOff == 0){
 24e:	80 91 16 01 	lds	r24, 0x0116
 252:	90 91 17 01 	lds	r25, 0x0117
 256:	89 2b       	or	r24, r25
 258:	79 f4       	brne	.+30     	; 0x278 <main+0x1aa>
			if(PINE == 0x20){
 25a:	81 b1       	in	r24, 0x01	; 1
 25c:	80 32       	cpi	r24, 0x20	; 32
 25e:	11 f5       	brne	.+68     	; 0x2a4 <main+0x1d6>
				onOff = 1;
 260:	f0 92 17 01 	sts	0x0117, r15
 264:	e0 92 16 01 	sts	0x0116, r14
 268:	88 ee       	ldi	r24, 0xE8	; 232
 26a:	93 e0       	ldi	r25, 0x03	; 3
 26c:	f8 01       	movw	r30, r16
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0x1a0>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 272:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 274:	d9 f7       	brne	.-10     	; 0x26c <main+0x19e>
 276:	16 c0       	rjmp	.+44     	; 0x2a4 <main+0x1d6>
				_delay_ms(100);
			}
		}
		else{
			if(PINE == 0x20){
 278:	81 b1       	in	r24, 0x01	; 1
 27a:	80 32       	cpi	r24, 0x20	; 32
 27c:	99 f4       	brne	.+38     	; 0x2a4 <main+0x1d6>
				onOff = 0;
 27e:	10 92 17 01 	sts	0x0117, r1
 282:	10 92 16 01 	sts	0x0116, r1
				tempNum = num;
 286:	80 91 14 01 	lds	r24, 0x0114
 28a:	90 91 15 01 	lds	r25, 0x0115
 28e:	90 93 19 01 	sts	0x0119, r25
 292:	80 93 18 01 	sts	0x0118, r24
 296:	88 ee       	ldi	r24, 0xE8	; 232
 298:	93 e0       	ldi	r25, 0x03	; 3
 29a:	f8 01       	movw	r30, r16
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <main+0x1ce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a2:	d9 f7       	brne	.-10     	; 0x29a <main+0x1cc>
				_delay_ms(100);
			}
		}

		if(PINE == 0x10){
 2a4:	81 b1       	in	r24, 0x01	; 1
 2a6:	80 31       	cpi	r24, 0x10	; 16
 2a8:	99 f4       	brne	.+38     	; 0x2d0 <main+0x202>
			num = 0;
 2aa:	10 92 15 01 	sts	0x0115, r1
 2ae:	10 92 14 01 	sts	0x0114, r1
			onOff = 0;
 2b2:	10 92 17 01 	sts	0x0117, r1
 2b6:	10 92 16 01 	sts	0x0116, r1
			tempNum = 0;
 2ba:	10 92 19 01 	sts	0x0119, r1
 2be:	10 92 18 01 	sts	0x0118, r1
 2c2:	88 ee       	ldi	r24, 0xE8	; 232
 2c4:	93 e0       	ldi	r25, 0x03	; 3
 2c6:	f8 01       	movw	r30, r16
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <main+0x1fa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ce:	d9 f7       	brne	.-10     	; 0x2c6 <main+0x1f8>
			_delay_ms(100);
		}

		num++;
 2d0:	80 91 14 01 	lds	r24, 0x0114
 2d4:	90 91 15 01 	lds	r25, 0x0115
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 15 01 	sts	0x0115, r25
 2de:	80 93 14 01 	sts	0x0114, r24
 2e2:	12 cf       	rjmp	.-476    	; 0x108 <main+0x3a>

000002e4 <__divmodhi4>:
 2e4:	97 fb       	bst	r25, 7
 2e6:	09 2e       	mov	r0, r25
 2e8:	07 26       	eor	r0, r23
 2ea:	0a d0       	rcall	.+20     	; 0x300 <__divmodhi4_neg1>
 2ec:	77 fd       	sbrc	r23, 7
 2ee:	04 d0       	rcall	.+8      	; 0x2f8 <__divmodhi4_neg2>
 2f0:	0c d0       	rcall	.+24     	; 0x30a <__udivmodhi4>
 2f2:	06 d0       	rcall	.+12     	; 0x300 <__divmodhi4_neg1>
 2f4:	00 20       	and	r0, r0
 2f6:	1a f4       	brpl	.+6      	; 0x2fe <__divmodhi4_exit>

000002f8 <__divmodhi4_neg2>:
 2f8:	70 95       	com	r23
 2fa:	61 95       	neg	r22
 2fc:	7f 4f       	sbci	r23, 0xFF	; 255

000002fe <__divmodhi4_exit>:
 2fe:	08 95       	ret

00000300 <__divmodhi4_neg1>:
 300:	f6 f7       	brtc	.-4      	; 0x2fe <__divmodhi4_exit>
 302:	90 95       	com	r25
 304:	81 95       	neg	r24
 306:	9f 4f       	sbci	r25, 0xFF	; 255
 308:	08 95       	ret

0000030a <__udivmodhi4>:
 30a:	aa 1b       	sub	r26, r26
 30c:	bb 1b       	sub	r27, r27
 30e:	51 e1       	ldi	r21, 0x11	; 17
 310:	07 c0       	rjmp	.+14     	; 0x320 <__udivmodhi4_ep>

00000312 <__udivmodhi4_loop>:
 312:	aa 1f       	adc	r26, r26
 314:	bb 1f       	adc	r27, r27
 316:	a6 17       	cp	r26, r22
 318:	b7 07       	cpc	r27, r23
 31a:	10 f0       	brcs	.+4      	; 0x320 <__udivmodhi4_ep>
 31c:	a6 1b       	sub	r26, r22
 31e:	b7 0b       	sbc	r27, r23

00000320 <__udivmodhi4_ep>:
 320:	88 1f       	adc	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	5a 95       	dec	r21
 326:	a9 f7       	brne	.-22     	; 0x312 <__udivmodhi4_loop>
 328:	80 95       	com	r24
 32a:	90 95       	com	r25
 32c:	bc 01       	movw	r22, r24
 32e:	cd 01       	movw	r24, r26
 330:	08 95       	ret

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
