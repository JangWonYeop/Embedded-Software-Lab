
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000002da  0000034e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002f1  00000000  00000000  0000039d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000124  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000289  00000000  00000000  000007b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ce  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000118  00000000  00000000  00000b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b8  00000000  00000000  00000c42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ed       	ldi	r30, 0xDA	; 218
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#define F_CPU	16000000UL	// CPU frequency = 16 Mhz
#include <avr/io.h>	
#include <util/delay.h>

int main (void)
{
  be:	2f 92       	push	r2
  c0:	3f 92       	push	r3
  c2:	4f 92       	push	r4
  c4:	5f 92       	push	r5
  c6:	6f 92       	push	r6
  c8:	7f 92       	push	r7
  ca:	8f 92       	push	r8
  cc:	9f 92       	push	r9
  ce:	af 92       	push	r10
  d0:	bf 92       	push	r11
  d2:	cf 92       	push	r12
  d4:	df 92       	push	r13
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	63 97       	sbiw	r28, 0x13	; 19
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
  DDRA = 0xff;	
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	8a bb       	out	0x1a, r24	; 26
		0x79, // E 
		0x71, // F 
		0x80, // . 
		0x40, // - 
		0x08  // _
	};
  f6:	de 01       	movw	r26, r28
  f8:	11 96       	adiw	r26, 0x01	; 1
  fa:	e0 e0       	ldi	r30, 0x00	; 0
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	83 e1       	ldi	r24, 0x13	; 19
 100:	01 90       	ld	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	81 50       	subi	r24, 0x01	; 1
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x42>
    unsigned int num=0, num0, num1, num2, num3;

	DDRC = 0xff;	
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	84 bb       	out	0x14, r24	; 20
    DDRG = 0x0f;
 10c:	8f e0       	ldi	r24, 0x0F	; 15
 10e:	80 93 64 00 	sts	0x0064, r24
		num0 = num % 10;
		PORTC = FND_DATA[num3];
		PORTG = 0x08;	
		_delay_ms(2);
			
		PORTC = FND_DATA[num2] | FND_DATA[16];
 112:	49 89       	ldd	r20, Y+17	; 0x11
 114:	f2 e3       	ldi	r31, 0x32	; 50
 116:	ef 2e       	mov	r14, r31
 118:	f1 2c       	mov	r15, r1

	DDRC = 0xff;	
    DDRG = 0x0f;
  	
  while (1)  {
    PORTA = 0xaa;
 11a:	ea ea       	ldi	r30, 0xAA	; 170
 11c:	2e 2e       	mov	r2, r30
		num++;
		num3 = (num / 1000) % 10;
		num2 = (num / 100) % 10;
		num1 = (num / 10) % 10;
		num0 = num % 10;
		PORTC = FND_DATA[num3];
 11e:	8e 01       	movw	r16, r28
 120:	0f 5f       	subi	r16, 0xFF	; 255
 122:	1f 4f       	sbci	r17, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 124:	70 e4       	ldi	r23, 0x40	; 64
 126:	a7 2e       	mov	r10, r23
 128:	7f e1       	ldi	r23, 0x1F	; 31
 12a:	b7 2e       	mov	r11, r23
		PORTG = 0x08;	
 12c:	60 ee       	ldi	r22, 0xE0	; 224
 12e:	c6 2e       	mov	r12, r22
 130:	6e e2       	ldi	r22, 0x2E	; 46
 132:	d6 2e       	mov	r13, r22
 134:	58 e0       	ldi	r21, 0x08	; 8
 136:	45 2e       	mov	r4, r21
		_delay_ms(2);
			
		PORTC = FND_DATA[num2] | FND_DATA[16];
		PORTG = 0x04;
 138:	34 e0       	ldi	r19, 0x04	; 4
 13a:	53 2e       	mov	r5, r19
		_delay_ms(3);
		
		PORTC = FND_DATA[num1];
		PORTG = 0x02;	
 13c:	22 e0       	ldi	r18, 0x02	; 2
 13e:	62 2e       	mov	r6, r18
		_delay_ms(2);
		
		PORTC = FND_DATA[num0];
		PORTG = 0x01;
 140:	77 24       	eor	r7, r7
 142:	73 94       	inc	r7
		_delay_ms(3);
	}

    PORTA = 0x55;
 144:	95 e5       	ldi	r25, 0x55	; 85
 146:	39 2e       	mov	r3, r25
		num0 = num % 10;
		PORTC = FND_DATA[num3];
		PORTG = 0x08;	
		_delay_ms(2);
			
		PORTC = FND_DATA[num2] | FND_DATA[16];
 148:	97 01       	movw	r18, r14
 14a:	22 53       	subi	r18, 0x32	; 50
 14c:	30 40       	sbci	r19, 0x00	; 0

	DDRC = 0xff;	
    DDRG = 0x0f;
  	
  while (1)  {
    PORTA = 0xaa;
 14e:	2b ba       	out	0x1b, r2	; 27
	//_delay_ms(500);

	for(int i=0; i<50; i++){
		num++;
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	3f 4f       	sbci	r19, 0xFF	; 255
		num3 = (num / 1000) % 10;
		num2 = (num / 100) % 10;
		num1 = (num / 10) % 10;
		num0 = num % 10;
		PORTC = FND_DATA[num3];
 154:	c9 01       	movw	r24, r18
 156:	68 ee       	ldi	r22, 0xE8	; 232
 158:	73 e0       	ldi	r23, 0x03	; 3
 15a:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 15e:	cb 01       	movw	r24, r22
 160:	6a e0       	ldi	r22, 0x0A	; 10
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 168:	f8 01       	movw	r30, r16
 16a:	e8 0f       	add	r30, r24
 16c:	f9 1f       	adc	r31, r25
 16e:	80 81       	ld	r24, Z
 170:	85 bb       	out	0x15, r24	; 21
		PORTG = 0x08;	
 172:	40 92 65 00 	sts	0x0065, r4
 176:	c5 01       	movw	r24, r10
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xba>
		_delay_ms(2);
			
		PORTC = FND_DATA[num2] | FND_DATA[16];
 17c:	c9 01       	movw	r24, r18
 17e:	64 e6       	ldi	r22, 0x64	; 100
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 186:	cb 01       	movw	r24, r22
 188:	6a e0       	ldi	r22, 0x0A	; 10
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 190:	f8 01       	movw	r30, r16
 192:	e8 0f       	add	r30, r24
 194:	f9 1f       	adc	r31, r25
 196:	80 81       	ld	r24, Z
 198:	84 2b       	or	r24, r20
 19a:	85 bb       	out	0x15, r24	; 21
		PORTG = 0x04;
 19c:	50 92 65 00 	sts	0x0065, r5
 1a0:	c6 01       	movw	r24, r12
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0xe4>
		_delay_ms(3);
		
		PORTC = FND_DATA[num1];
 1a6:	c9 01       	movw	r24, r18
 1a8:	6a e0       	ldi	r22, 0x0A	; 10
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 1b0:	cb 01       	movw	r24, r22
 1b2:	6a e0       	ldi	r22, 0x0A	; 10
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 1ba:	f8 01       	movw	r30, r16
 1bc:	e8 0f       	add	r30, r24
 1be:	f9 1f       	adc	r31, r25
 1c0:	80 81       	ld	r24, Z
 1c2:	85 bb       	out	0x15, r24	; 21
		PORTG = 0x02;	
 1c4:	60 92 65 00 	sts	0x0065, r6
 1c8:	c5 01       	movw	r24, r10
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0x10c>
		_delay_ms(2);
		
		PORTC = FND_DATA[num0];
 1ce:	c9 01       	movw	r24, r18
 1d0:	6a e0       	ldi	r22, 0x0A	; 10
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 1d8:	f8 01       	movw	r30, r16
 1da:	e8 0f       	add	r30, r24
 1dc:	f9 1f       	adc	r31, r25
 1de:	80 81       	ld	r24, Z
 1e0:	85 bb       	out	0x15, r24	; 21
		PORTG = 0x01;
 1e2:	70 92 65 00 	sts	0x0065, r7
 1e6:	c6 01       	movw	r24, r12
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0x12a>
  	
  while (1)  {
    PORTA = 0xaa;
	//_delay_ms(500);

	for(int i=0; i<50; i++){
 1ec:	2e 15       	cp	r18, r14
 1ee:	3f 05       	cpc	r19, r15
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <main+0x136>
 1f2:	ae cf       	rjmp	.-164    	; 0x150 <main+0x92>
		PORTC = FND_DATA[num0];
		PORTG = 0x01;
		_delay_ms(3);
	}

    PORTA = 0x55;
 1f4:	3b ba       	out	0x1b, r3	; 27
	//_delay_ms(500);

	for(int i=0; i<50; i++){
 1f6:	82 e3       	ldi	r24, 0x32	; 50
 1f8:	88 2e       	mov	r8, r24
 1fa:	91 2c       	mov	r9, r1
 1fc:	82 0e       	add	r8, r18
 1fe:	93 1e       	adc	r9, r19
		num++;
 200:	2f 5f       	subi	r18, 0xFF	; 255
 202:	3f 4f       	sbci	r19, 0xFF	; 255
		num3 = (num / 1000) % 10;
		num2 = (num / 100) % 10;
		num1 = (num / 10) % 10;
		num0 = num % 10;
		PORTC = FND_DATA[num3];
 204:	c9 01       	movw	r24, r18
 206:	68 ee       	ldi	r22, 0xE8	; 232
 208:	73 e0       	ldi	r23, 0x03	; 3
 20a:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 20e:	cb 01       	movw	r24, r22
 210:	6a e0       	ldi	r22, 0x0A	; 10
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 218:	f8 01       	movw	r30, r16
 21a:	e8 0f       	add	r30, r24
 21c:	f9 1f       	adc	r31, r25
 21e:	80 81       	ld	r24, Z
 220:	85 bb       	out	0x15, r24	; 21
		PORTG = 0x08;	
 222:	40 92 65 00 	sts	0x0065, r4
 226:	c5 01       	movw	r24, r10
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x16a>
		_delay_ms(2);
			
		PORTC = FND_DATA[num2] | FND_DATA[16];
 22c:	c9 01       	movw	r24, r18
 22e:	64 e6       	ldi	r22, 0x64	; 100
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 236:	cb 01       	movw	r24, r22
 238:	6a e0       	ldi	r22, 0x0A	; 10
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 240:	f8 01       	movw	r30, r16
 242:	e8 0f       	add	r30, r24
 244:	f9 1f       	adc	r31, r25
 246:	80 81       	ld	r24, Z
 248:	84 2b       	or	r24, r20
 24a:	85 bb       	out	0x15, r24	; 21
		PORTG = 0x04;
 24c:	50 92 65 00 	sts	0x0065, r5
 250:	c6 01       	movw	r24, r12
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <main+0x194>
		_delay_ms(3);
		
		PORTC = FND_DATA[num1];
 256:	c9 01       	movw	r24, r18
 258:	6a e0       	ldi	r22, 0x0A	; 10
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 260:	cb 01       	movw	r24, r22
 262:	6a e0       	ldi	r22, 0x0A	; 10
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 26a:	f8 01       	movw	r30, r16
 26c:	e8 0f       	add	r30, r24
 26e:	f9 1f       	adc	r31, r25
 270:	80 81       	ld	r24, Z
 272:	85 bb       	out	0x15, r24	; 21
		PORTG = 0x02;	
 274:	60 92 65 00 	sts	0x0065, r6
 278:	c5 01       	movw	r24, r10
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <main+0x1bc>
		_delay_ms(2);
		
		PORTC = FND_DATA[num0];
 27e:	c9 01       	movw	r24, r18
 280:	6a e0       	ldi	r22, 0x0A	; 10
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 288:	f8 01       	movw	r30, r16
 28a:	e8 0f       	add	r30, r24
 28c:	f9 1f       	adc	r31, r25
 28e:	80 81       	ld	r24, Z
 290:	85 bb       	out	0x15, r24	; 21
		PORTG = 0x01;
 292:	70 92 65 00 	sts	0x0065, r7
 296:	c6 01       	movw	r24, r12
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <main+0x1da>
	}

    PORTA = 0x55;
	//_delay_ms(500);

	for(int i=0; i<50; i++){
 29c:	28 15       	cp	r18, r8
 29e:	39 05       	cpc	r19, r9
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <main+0x1e6>
 2a2:	ae cf       	rjmp	.-164    	; 0x200 <main+0x142>
 2a4:	84 e6       	ldi	r24, 0x64	; 100
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	e8 0e       	add	r14, r24
 2aa:	f9 1e       	adc	r15, r25
 2ac:	4d cf       	rjmp	.-358    	; 0x148 <main+0x8a>

000002ae <__udivmodhi4>:
 2ae:	aa 1b       	sub	r26, r26
 2b0:	bb 1b       	sub	r27, r27
 2b2:	51 e1       	ldi	r21, 0x11	; 17
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <__udivmodhi4_ep>

000002b6 <__udivmodhi4_loop>:
 2b6:	aa 1f       	adc	r26, r26
 2b8:	bb 1f       	adc	r27, r27
 2ba:	a6 17       	cp	r26, r22
 2bc:	b7 07       	cpc	r27, r23
 2be:	10 f0       	brcs	.+4      	; 0x2c4 <__udivmodhi4_ep>
 2c0:	a6 1b       	sub	r26, r22
 2c2:	b7 0b       	sbc	r27, r23

000002c4 <__udivmodhi4_ep>:
 2c4:	88 1f       	adc	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	5a 95       	dec	r21
 2ca:	a9 f7       	brne	.-22     	; 0x2b6 <__udivmodhi4_loop>
 2cc:	80 95       	com	r24
 2ce:	90 95       	com	r25
 2d0:	bc 01       	movw	r22, r24
 2d2:	cd 01       	movw	r24, r26
 2d4:	08 95       	ret

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
